{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The Linter is an Obsidian.md plugin that is designed to help keep your notes in a more uniform pattern. It is designed to allow the user to specify which rules and settings to use so that they can try to make their notes as uniform as possible.</p> <p>This includes, but is not limited to, rules that affect:</p> <ul> <li>YAML frontmatter</li> <li>Markdown headings</li> <li>Github flavored footnotes</li> <li>General markdown content</li> <li>Spacing</li> <li>Pasting content within the app</li> </ul>"},{"location":"#how-it-works","title":"How it Works","text":"<p>The Linter follows the following basic steps when it is run on a file:</p> <pre><code>graph TD\n    start[User initiates linting of file or files] --&gt; run-linter-rules\n    run-linter-rules[If file is not ignored, run Linter rules and Custom Commands*] --&gt; handle-error\n    handle-error{Did an error happen?} -- No --&gt; update-file\n    handle-error -- Yes --&gt; log-error\n    log-error[Display error and log to dev console] --&gt; done\n    update-file[Update file contents**] --&gt; done\n    done[Done]</code></pre> <p>Note</p> <p>*Currently custom commands only run when a single file is linted.</p> <p>**This is a bit of a simplification as the file is updated after running Linter rules, but before Custom Commands run if no error has occurred.</p>"},{"location":"#1-user-initiates-linting-of-file-or-files","title":"1. User Initiates Linting of File or Files","text":"<p>The user can initiate the Linter in several different ways. The scope of the action can affect anywhere from a file, to a folder and its subfolders, to the entire vault. These actions can be initiated in several different ways as described in Running Rules.</p>"},{"location":"#2-run-linter-rules-and-custom-commands-if-file-is-not-ignored","title":"2. Run Linter Rules and Custom Commands if File is not Ignored","text":"<p>The Linter checks to see if the file it is trying to lint is located in an ignored folder (learn more here for more details). If that is the case, the file is skipped. If the file is not ignored, any disabled rules are pulled from the YAML frontmatter (learn more here).</p> <p>Once the list of rules that are disabled have been collected, rules are run in the following order:</p> <ol> <li>Rules that need to run before other rules</li> <li>Regular rules</li> <li>Custom regex replacements</li> <li>Rules that need to be run after most other rules</li> </ol> <p>After each rule is run, an error check is performed and if any error happens the linting of a file stops. If no error happens while running Linter rules, the file is updated in preparation for the Custom Commands running since they need changes to the file to have already been written.</p> <p>Assuming the Linter is just linting a single file, Custom Commands are run. After each Custom Command is run, linting will stop if an error has happened.</p>"},{"location":"#3-handle-any-errors","title":"3. Handle Any Errors","text":"<p>If any errors happened while running Linter rules or Custom Commands, a notice is displayed in the UI and a log is added to the dev console. Otherwise, everything is done.</p>"},{"location":"credits/","title":"Credits","text":"<p>Thanks to all of the different people who have contributed to this plugin!</p> <p>A special thanks to chrisgrieser for doing all of the base work for and for suggesting that the paste logic should reside in the Linter!</p> <p>A special thanks to Michael Naumov for rewriting the Linter in such a way that it could warn about invalid usages of option values, make sure that the proper properties were set in settings, and much much more!</p>"},{"location":"contributing/adding-a-rule/","title":"Adding a Rule","text":"<p>Before trying to add a rule, make sure that you have setup the Linter for local use as described in the Setup Guide.</p> <p>Once the Linter is setup locally, there are several steps in adding a new rule to the Linter that should be followed that will make your and our lives easier by saving you and us time in the long run.</p>"},{"location":"contributing/adding-a-rule/#1-create-a-feature-request","title":"1. Create a Feature Request","text":"<p>Please first put in a feature request. This will allow us to take a look at the requested feature and make sure it fits within the Linter.</p>"},{"location":"contributing/adding-a-rule/#2-create-new-file-for-the-rule","title":"2. Create New File for the Rule","text":"<p>Once the new rule has been verified to be something that fits within the scope of the Linter, the rule can be added to the repository. To do this, you will need to add a new file to <code>src/rules/</code> in the repository. It is easiest to either copy an existing rule. or copy and rename src/rules_rule-template.ts.txt.</p> <p>Please try to follow the format of existing rules where possible since that makes the code easier to maintain and changes easier to review.</p>"},{"location":"contributing/adding-a-rule/#3-fill-out-the-different-parts-of-a-rule","title":"3. Fill Out the Different Parts of a Rule","text":"<p>Rules generally have several parts to them:</p> <ul> <li>The options</li> <li>The option builders or settings</li> <li>The constructor</li> <li>The apply function or logic for the rule</li> <li>The examples</li> <li>The rule text</li> </ul> <p>To help better understand these parts and make it easier to feel comfortable with the different parts let's look at a general example and go over each part of a rule.</p> <p>In general a rule looks something like the following example which is a trimmed down version of YAML Key Sort:</p> <pre><code>import {Options, RuleType} from '../rules';\nimport RuleBuilder, {BooleanOptionBuilder, DropdownOptionBuilder, ExampleBuilder, OptionBuilderBase, TextAreaOptionBuilder} from './rule-builder';\nimport dedent from 'ts-dedent';\nimport {yamlRegex} from '../utils/regex';\nimport {getYamlSectionValue, loadYAML, removeYamlSection, setYamlSection} from '../utils/yaml';\n\ntype YamlSortOrderForOtherKeys = 'None' | 'Ascending Alphabetical' | 'Descending Alphabetical';\n\nclass YamlKeySortOptions implements Options {\n  priorityKeysAtStartOfYaml?: boolean = true;\n\n  @RuleBuilder.noSettingControl()\n    dateModifiedKey?: string;\n\n  @RuleBuilder.noSettingControl()\n    currentTimeFormatted?: string;\n\n  @RuleBuilder.noSettingControl()\n    yamlTimestampDateModifiedEnabled?: boolean;\n\n  yamlKeyPrioritySortOrder?: string[] = [];\n  yamlSortOrderForOtherKeys?: YamlSortOrderForOtherKeys = 'None';\n}\n\n@RuleBuilder.register // This decorator allows the rule to automatically be registered as a rule when the plugin loads\nexport default class YamlKeySort extends RuleBuilder&lt;YamlKeySortOptions&gt; {\n  constructor() {\n    super({\n      nameKey: 'rules.yaml-key-sort.name',\n      descriptionKey: 'rules.yaml-key-sort.description',\n      type: RuleType.YAML,\n      hasSpecialExecutionOrder: true,\n    });\n  }\n  get OptionsClass(): new () =&gt; YamlKeySortOptions {\n    return YamlKeySortOptions; // always returns the options for the current rule\n  }\n  apply(text: string, options: YamlKeySortOptions): string {\n    // Rule logic goes here...\n  }\n  getYAMLKeysSorted(yaml: string, keys: string[]): {remainingYaml: string, sortedYamlKeyValues: string} {\n    // helper function's logic here...\n  }\n  get exampleBuilders(): ExampleBuilder&lt;YamlKeySortOptions&gt;[] {\n    return [\n      new ExampleBuilder({\n        description: 'Sorts YAML keys in order specified by `YAML Key Priority Sort Order` has a sort order of `date type language`',\n        before: dedent`\n          ---\n          language: Typescript\n          type: programming\n          tags: computer\n          keywords: []\n          status: WIP\n          date: 02/15/2022\n          ---\n        `,\n        after: dedent`\n          ---\n          date: 02/15/2022\n          type: programming\n          language: Typescript\n          tags: computer\n          keywords: []\n          status: WIP\n          ---\n        `,\n        options: { // only needed when using non-default values for rule options\n          yamlKeyPrioritySortOrder: [\n            'date',\n            'type',\n            'language',\n          ],\n          yamlSortOrderForOtherKeys: 'None',\n          priorityKeysAtStartOfYaml: true,\n        },\n      }),\n    ];\n  }\n  get optionBuilders(): OptionBuilderBase&lt;YamlKeySortOptions&gt;[] {\n    return [\n      new TextAreaOptionBuilder({\n        OptionsClass: YamlKeySortOptions,\n        nameKey: 'rules.yaml-key-sort.yaml-key-priority-sort-order.name',\n        descriptionKey: 'rules.yaml-key-sort.yaml-key-priority-sort-order.description',\n        optionsKey: 'yamlKeyPrioritySortOrder',\n      }),\n      new BooleanOptionBuilder({\n        OptionsClass: YamlKeySortOptions,\n        nameKey: 'rules.yaml-key-sort.priority-keys-at-start-of-yaml.name',\n        descriptionKey: 'rules.yaml-key-sort.priority-keys-at-start-of-yaml.description',\n        optionsKey: 'priorityKeysAtStartOfYaml',\n      }),\n      new DropdownOptionBuilder&lt;YamlKeySortOptions, YamlSortOrderForOtherKeys&gt;({\n        OptionsClass: YamlKeySortOptions,\n        nameKey: 'rules.yaml-key-sort.yaml-sort-order-for-other-keys.name',\n        descriptionKey: 'rules.yaml-key-sort.yaml-sort-order-for-other-keys.description',\n        optionsKey: 'yamlSortOrderForOtherKeys',\n        records: [\n          {\n            value: 'None',\n            description: 'No sorting other than what is in the YAML Key Priority Sort Order text area',\n          },\n          {\n            value: 'Ascending Alphabetical',\n            description: 'Sorts the keys based on key value from a to z',\n          },\n          {\n            value: 'Descending Alphabetical',\n            description: 'Sorts the keys based on key value from z to a',\n          },\n        ],\n      }),\n    ];\n  }\n}\n</code></pre> <p>Now let's take a look at the parts of a rule.</p>"},{"location":"contributing/adding-a-rule/#rule-options","title":"Rule Options","text":"<p>Rule options are options that are passed into a rule for use within the rule logic. These are often user defined or related to the current file or environment to help determine how to execute the rule logic.</p> <p>Here is an example of what rule options look like in use:</p> <pre><code>class YamlKeySortOptions implements Options {\n  priorityKeysAtStartOfYaml?: boolean = true;\n\n  @RuleBuilder.noSettingControl()\n    dateModifiedKey?: string;\n\n  @RuleBuilder.noSettingControl()\n    currentTimeFormatted?: string;\n\n  @RuleBuilder.noSettingControl()\n    yamlTimestampDateModifiedEnabled?: boolean;\n\n  yamlKeyPrioritySortOrder?: string[] = [];\n  yamlSortOrderForOtherKeys?: YamlSortOrderForOtherKeys = 'None';\n}\n</code></pre> <p>There are probably a couple of things you notice that may seem weird. The first thing you may notice is that some rules have <code>@RuleBuilder.noSettingControl()</code> above them and some do not. You may wonder why that is. The reason for this decorator being above some options and not others is that some of these options get their values from the settings for this particular rule and some do not. Using this decorator above options that do not have a setting that is generated by the rule allows us to test that all options for a rule have a corresponding setting and thus get set.</p> <p>Setting noSettingControl settings</p> <p>If you are adding a setting that has no setting control in the rule you are adding, make sure that the value of the setting is being set in rules-runner.ts.</p> <p>The second thing that you may notice is that all of the rule options are optional on the options class (<code>?:</code>). This is done to allow for easier testing in the unit tests and examples since you will only need to set values relevant to the test or example in question.</p> <p>The third thing you may notice is that all of the regular rule options have a default value (<code>= value;</code>). This makes sure that even if no value is provided a default is used. This makes the rule options more reliable and less prone to bugs when reading in the settings file or running unit tests.</p>"},{"location":"contributing/adding-a-rule/#empty-rule-options","title":"Empty Rule Options","text":"<p>There are rules that do not have any options at all. These rules still need an option class for the rule to work, but the class body can be left empty like so:</p> <pre><code>class YamlKeySortOptions implements Options {}\n</code></pre>"},{"location":"contributing/adding-a-rule/#rule-settings","title":"Rule Settings","text":"<p>Rule settings are directly related to rule options. Each rule setting must correspond to a value in the rule options. Since each rule setting is used to \"build\" the UI component for the corresponding value in the rule options, the rule settings are created via the use of the option builder functions. Another function of the rule settings is that they help link settings in the UI with settings in the config file.</p> <p>In the example above we see the following settings:</p> <pre><code>get optionBuilders(): OptionBuilderBase&lt;YamlKeySortOptions&gt;[] {\n  return [\n    new TextAreaOptionBuilder({\n      OptionsClass: YamlKeySortOptions,\n      nameKey: 'rules.yaml-key-sort.yaml-key-priority-sort-order.name',\n      descriptionKey: 'rules.yaml-key-sort.yaml-key-priority-sort-order.description',\n      optionsKey: 'yamlKeyPrioritySortOrder',\n    }),\n    new BooleanOptionBuilder({\n      OptionsClass: YamlKeySortOptions,\n      nameKey: 'rules.yaml-key-sort.priority-keys-at-start-of-yaml.name',\n      descriptionKey: 'rules.yaml-key-sort.priority-keys-at-start-of-yaml.description',\n      optionsKey: 'priorityKeysAtStartOfYaml',\n    }),\n    new DropdownOptionBuilder&lt;YamlKeySortOptions, YamlSortOrderForOtherKeys&gt;({\n      OptionsClass: YamlKeySortOptions,\n      nameKey: 'rules.yaml-key-sort.yaml-sort-order-for-other-keys.name',\n      descriptionKey: 'rules.yaml-key-sort.yaml-sort-order-for-other-keys.description',\n      optionsKey: 'yamlSortOrderForOtherKeys',\n      records: [\n        {\n          value: 'None',\n          description: 'No sorting other than what is in the YAML Key Priority Sort Order text area',\n        },\n        {\n          value: 'Ascending Alphabetical',\n          description: 'Sorts the keys based on key value from a to z',\n        },\n        {\n          value: 'Descending Alphabetical',\n          description: 'Sorts the keys based on key value from z to a',\n        },\n      ],\n    }),\n  ];\n}\n</code></pre> <p>We see in the example above that there are several common properties among the different kinds of settings.</p> Name Description <code>optionsKey</code> The string name of the property that this setting will update when its value changes on the settings page <code>OptionsClass</code> Allows the option builder validate that rule option specified in <code>optionsKey</code> is the correct type for the values that the option builder expects to deal with <code>nameKey</code> The object property representation of the value in en.ts that has the text for the name of the rule setting <code>descriptionKey</code> The object property representation of the value in en.ts that has the text for the description of the rule setting <p>You may notice that the keys for the settings follow the format of <code>rules.rule-alias.setting-name.name</code> or <code>rules.rule-alias.setting-name.description</code>. Following this pattern allows for ease of understanding what each value means.</p> <p>The <code>DropdownOptionBuilder</code> is a little different from other option builders in that it lets a user select an option from a list know as the <code>records</code>. Records have a value and a description. The value is what is stored in the config and is used as part of the identifier for the key of the display text. For example, the text value of <code>None</code> in the UI is determined by pulling back the text value for <code>enums.None</code> in the corresponding language file (<code>en.ts</code> being the source of truth for all keys). The description of a record currently is only used for documentation and rule searching purposes. It is only in English at this time.</p> <p>The <code>DropdownOptionBuilder</code> is also a little special in that it expects not only the option class, but also the type of the record values to expect (an enum or union type). In the example above we see that <code>DropdownOptionBuilder&lt;YamlKeySortOptions, YamlSortOrderForOtherKeys&gt;</code> expects the values of the records to be part of <code>YamlSortOrderForOtherKeys</code> so it can give warnings about improper values being used in the unit tests and the rule setting itself. This can help reduce the amount of programmatic errors that come with changes in the code over time.</p>"},{"location":"contributing/adding-a-rule/#empty-rule-settings","title":"Empty Rule Settings","text":"<p>Some rules have no options that have a setting in the UI. When this happens, the rule settings can be left blank like so:</p> <pre><code>get optionBuilders(): OptionBuilderBase&lt;YamlKeySortOptions&gt;[] {\n  return [];\n}\n</code></pre>"},{"location":"contributing/adding-a-rule/#the-rule-constructor","title":"The Rule Constructor","text":"<p>The rule constructor helps simplify the setup of several rule properties without having to pass them around in multiple places.</p> <p>In the example above it looks like the following:</p> <pre><code>constructor() {\n  super({\n    nameKey: 'rules.yaml-key-sort.name',\n    descriptionKey: 'rules.yaml-key-sort.description',\n    type: RuleType.YAML,\n    hasSpecialExecutionOrder: true,\n  });\n}\n</code></pre> <p>Here are all the properties that can be specified in the constructor of a rule:</p> Name Description Is Required (Y/N) Example Value <code>nameKey</code> The object property representation of the value in en.ts that has the text for the name of the rule. The value should be in the format <code>rules.rule-alias.name</code>. Y <code>rules.yaml-key-sort.name</code> <code>descriptionKey</code> The object property representation of the value in en.ts that has the text for the description of the rule. The value should be in the format <code>rules.rule-alias.description</code>. Y <code>rules.yaml-key-sort.description</code> <code>type</code> The type of the rule which determines where in the settings it shows up and whether to test it with YAML frontmatter added as part of the example tests. Y <code>RuleType.YAML</code> <code>hasSpecialExecutionOrder</code> Specifies whether this rule will be manually executed in either the before or after Linter rules in rules-runner.ts. Its default value is <code>false</code>. N <code>true</code> <code>ruleIgnoreTypes</code> The list of ignore types which can be found in ignore-types.ts that should be ignored for all the logic of the rule. This is useful for ignoring things like code blocks or YAML frontmatter. It default to an empty array (<code>[]</code>). Do not put <code>IgnoreTypes.customIgnore</code> in this list as it is automatically added to all rules except for <code>RuleType.PASTE</code>. N <code>[IgnoreTypes.code, IgnoreTypes.math, IgnoreTypes.yaml, IgnoreTypes.link, IgnoreTypes.wikiLink, IgnoreTypes.tag],</code>"},{"location":"contributing/adding-a-rule/#the-rule-logic","title":"The Rule Logic","text":"<p>The rule logic of all rules is applied after the types specified in <code>ruleIgnoreTypes</code> and the added value of <code>IgnoreTypes.customIgnore</code> is applied. Once those types of elements in the file have been ignored, the rule logic can safely be applied.</p> <p>The logic of a rule goes in the <code>apply</code> function. You may add as many helper functions to the rule class as you need.</p> <p>In the example above we see the following for the <code>apply</code> and helper functions:</p> <pre><code>apply(text: string, options: YamlKeySortOptions): string {\n  // Rule logic goes here...\n}\ngetYAMLKeysSorted(yaml: string, keys: string[]): {remainingYaml: string, sortedYamlKeyValues: string} {\n  // helper function's logic here...\n}\n</code></pre> <p>At times you may find a function or variable that is needed in multiple rules. These functions and variables are often stored in  <code>src/utils/</code>. Feel free to reuse as much logic as possible from within these existing files to help reduce the amount of code we need to maintain.</p>"},{"location":"contributing/adding-a-rule/#ignoring-types-for-part-of-a-rules-logic","title":"Ignoring Types for Part of a Rule's Logic","text":"<p>At times, there is a need to ignore a specific type of element in a file for just a portion of the logic of the rule. This can be done using <code>ignoreListOfTypes</code> from ignore-types.ts which takes a list of <code>IgnoreTypes</code> and a function that takes the resulting string and returns another string.</p> <p>We have an example of this in Remove Space Around Characters where we needed to make sure we did not remove whitespace between a list indicator and the fullwidth or other characters in question so we had to ignore lists for the first regex replacement and then do the same regex replacement on just the list item text:</p> <pre><code>const replaceWhitespaceAroundFullwidthCharacters = function(text: string): string {\n  return text.replace(fullwidthCharacterWithTextAtStart, '$2').replace(fullwidthCharacterWithTextAtEnd, '$1');\n};\n\nlet newText = ignoreListOfTypes([IgnoreTypes.list], text, replaceWhitespaceAroundFullwidthCharacters);\n\nnewText = updateListItemText(newText, replaceWhitespaceAroundFullwidthCharacters);\n</code></pre>"},{"location":"contributing/adding-a-rule/#rule-examples","title":"Rule Examples","text":"<p>Rule examples are pretty important for rules as they serve as both examples that people see in the documentation for rules, but also because they double as unit tests that are run in simple and advanced cases so long as they are not <code>YAML</code> or <code>PASTE</code> rules.</p> <p>There must be at least 1 example per rule. The more complex the rule the more examples should be shown.</p> <p>In the example above, the rule examples looked as follows:</p> <pre><code>get exampleBuilders(): ExampleBuilder&lt;YamlKeySortOptions&gt;[] {\n  return [\n    new ExampleBuilder({\n      description: 'Sorts YAML keys in order specified by `YAML Key Priority Sort Order` has a sort order of `date type language`',\n      before: dedent`\n        ---\n        language: Typescript\n        type: programming\n        tags: computer\n        keywords: []\n        status: WIP\n        date: 02/15/2022\n        ---\n      `,\n      after: dedent`\n        ---\n        date: 02/15/2022\n        type: programming\n        language: Typescript\n        tags: computer\n        keywords: []\n        status: WIP\n        ---\n      `,\n      options: { // only needed when using non-default values for rule options\n        yamlKeyPrioritySortOrder: [\n          'date',\n          'type',\n          'language',\n        ],\n        yamlSortOrderForOtherKeys: 'None',\n        priorityKeysAtStartOfYaml: true,\n      },\n    }),\n  ];\n}\n</code></pre> <p>Here are the properties of each example:</p> Name Description Is Required (Y/N) <code>description</code> The name and description of the example which is meant to explain if any options are set that are not the default and give an overview of what the example shows Y <code>before</code> This is the file before changes are made by the rule or the clipboard contents before the changes made by the rule when the rule's type is <code>PASTE</code> Y <code>after</code> This is the file after changes are made by the rule or the clipboard contents after the changes made by the rule when the rule's type is <code>PASTE</code> Y <code>options</code> These are the options to use for the example. It should only be used for clarity around what options are being set or in order to set non-default values for options. N"},{"location":"contributing/adding-a-rule/#rule-text","title":"Rule Text","text":"<p>The text that displays for the rule and its settings is something that needs to be added as well. They were mentioned above in the sections talking about Rule Settings and Rule Constructor.</p> <p>At the very least, a new rule requires entries to be added for the rule name and description of the new rule in en.ts.</p> <p>If we <code>YAML Key Sort</code> did not already exist, I would need to navigate to en.ts. Once there I would need to find the  <code>rules</code> property of the file and determine where the alias for <code>YAML Key Sort</code> would go alphabetically or roughly alphabetically. That means I would either add the new properties at the start or the end of the rules that start with the letter y since the alias for <code>YAML Key Sort</code> is <code>yaml-key-sort</code>. Once it has been decided where <code>YAML Key Sort</code> will be added, we would add the following for the rule name and description:</p> <pre><code>// yaml-key-sort.ts\n'yaml-key-sort': {\n  'name': 'YAML Key Sort',\n  'description': 'Sorts the YAML keys based on the order and priority specified. Note: may remove blank lines as well.',\n},\n</code></pre> <p>Then I would need to add entries for each and every rule setting making the final text for rule as follows:</p> <pre><code>// yaml-key-sort.ts\n'yaml-key-sort': {\n  'name': 'YAML Key Sort',\n  'description': 'Sorts the YAML keys based on the order and priority specified. Note: may remove blank lines as well.',\n  'yaml-key-priority-sort-order': {\n    'name': 'YAML Key Priority Sort Order',\n    'description': 'The order in which to sort keys with one on each line where it sorts in the order found in the list',\n  },\n  'priority-keys-at-start-of-yaml': {\n    'name': 'Priority Keys at Start of YAML',\n    'description': 'YAML Key Priority Sort Order is placed at the start of the YAML frontmatter',\n  },\n  'yaml-sort-order-for-other-keys': {\n    'name': 'YAML Sort Order for Other Keys',\n    'description': 'The way in which to sort the keys that are not found in the YAML Key Priority Sort Order text area',\n  },\n},\n</code></pre> <p>However we are not quite done. We also had dropdown records that were added, so we also need to navigate to the <code>enums</code> property in the file and add one value for each new record value text:</p> <pre><code>'enums': {\n  ...\n  'None': 'None',\n  'Ascending Alphabetical': 'Ascending Alphabetical',\n  'Descending Alphabetical': 'Descending Alphabetical',\n  ...\n},\n</code></pre> <p>Once that is done feel free to repeat this change in any other language that is supported by the Linter. There is no need to add the values to any other supported languages since the value will come from the English text values if it is not found in the other languages. Generally Google Translate is acceptable for the values for the initial translation into a language. If someone sees that the value is not correct in the language they use, they can suggest a change to the wording.</p>"},{"location":"contributing/adding-a-rule/#4-add-edge-case-tests-if-applicable","title":"4. Add Edge Case Tests if Applicable","text":"<p>Once a rule has been created, see about adding tests for edge cases as described in Adding Test.</p>"},{"location":"contributing/adding-a-rule/#5-open-a-pull-request","title":"5. Open a Pull Request","text":"<p>Once the tests are in place, the new rule should be ready for review. So go on ahead and open a pull request.</p>"},{"location":"contributing/bug-fix/","title":"Bug Fixes","text":"<p>Before trying to fix a bug, make sure that you have setup the Linter for local use as described in the Setup Guide.</p> <p>Once the Linter is setup as a local repo, there are several things that can be done to fix bugs.</p>"},{"location":"contributing/bug-fix/#identify-the-cause-of-the-bug","title":"Identify the Cause of the Bug","text":"<p>When a bug has been reported or encountered and you do not know where the bug is, it can be very helpful to try a couple of things to narrow down what causes the bug.</p>"},{"location":"contributing/bug-fix/#load-in-config-that-causes-the-bug","title":"Load in Config that Causes the Bug","text":"<p>The first thing that I tend to do once I get a bug report is make sure I have the <code>data.json</code> of the person who reported the issue. Without having this, it can be very hard to reproduce the issue in some cases.</p>"},{"location":"contributing/bug-fix/#start-disabling-rules","title":"Start Disabling Rules","text":"<p>Once I have the config loaded, the next step is start disabling rules. I will generally start with 1 rule being disabled at a time before re-linting the file in question to see if it reproduces the issue in question. I will sometimes just turn off a bunch of unrelated rules when I am fairly confident that these rules are unrelated.</p> <p>The end goal of disabling rules is to get down to just 1 rule that causes the issue. If you have to have 2 or more rules active in order to cause the issue, the bug fix will get a lot tougher.</p> <p>multiple rule bugs</p> <p>When a bug is caused by multiple rules making changes to a file, the only way to currently reproduce the behavior is in Obsidian itself. So you need to run <code>npm run build</code> once you have added <code>console.log</code> statements to rules-runner.ts to help narrow down what the text looks like when it is being processed by each of the rules that are enabled in order to cause the bug.</p>"},{"location":"contributing/bug-fix/#create-a-unit-test","title":"Create a Unit Test","text":"<p>If the bug is caused by a single rule, please add a unit test to the rule's general test suite. This will make it easier to tell when the bug is fixed and help make sure that we do not cause the same issue again down the road.</p>"},{"location":"contributing/bug-fix/#update-code","title":"Update Code","text":"<p>Now comes the fun part: updating the code to fix the bug. Sometimes this is straight forward and other times this is complex. The thing that will dictate how hard the fix will be is how complex the rule logic is already.</p>"},{"location":"contributing/bug-fix/#create-a-pull-request","title":"Create a Pull Request","text":"<p>Once you have updated the code and the bug is fixed, then open a pull request.</p>"},{"location":"contributing/documentation/","title":"Linter Documentation","text":"<p>The documentation for the Linter is broken up into a couple of different categories: manually created, template, and generated.</p>"},{"location":"contributing/documentation/#manually-created-documentation","title":"Manually Created Documentation","text":"<p>Manually created documentation is documentation that lives in the <code>docs/docs</code> folder and is not generated. These files are created and added to the <code>mkdocs</code> setup in order to allow them to be hosted with the rest of the documentation for the Linter. Some examples of manually created documentation include this page and all of the other pages under the \"Contributing\" heading.</p>"},{"location":"contributing/documentation/#generated-documentation","title":"Generated Documentation","text":"<p>A lot of the documentation for this plugin is generated. See the Documentation Templates  section to see which files they are and when they should be updated.</p> <p>If you are looking to update the rules list information like section, examples, descriptions, or options in the README or rules documentation, update the rule information in the corresponding rule file located in <code>src/rules/</code>.</p> <p>To update how rules have their information displayed, you will want to update the logic in the <code>generateDocs</code> method in  docs.ts.</p>"},{"location":"contributing/documentation/#additional-information-for-rules-and-rule-types","title":"Additional Information for Rules and Rule Types","text":"<p>Sometimes there is a need to clarify how a rule works, why a rule works the way that it does, or some general things to keep in mind about specific rule types.</p>"},{"location":"contributing/documentation/#additional-information-for-rules","title":"Additional Information for Rules","text":"<p>Additional info for rules are located under <code>docs/additional-info/rules/</code>. The file names are the same as the rule alias for the rule that they are supposed to add additional information for. Info added in these files generally are used to help clarify how a rule works or limitations to that specific rule. It can also warn users not to use specific rules with each other.</p>"},{"location":"contributing/documentation/#additional-information-for-rule-types","title":"Additional Information for Rule Types","text":"<p>Additional info for rules are located under <code>docs/additional-info/rule-types/</code>. The file names are the same as the rule type when lowercased. Info added in these files generally include limitations and things to keep in mind.</p>"},{"location":"contributing/documentation/#documentation-templates","title":"Documentation Templates","text":"<p>Currently there is 1 template file used for generating documentation with:</p> <ol> <li>readme_template.md</li> <li>This template is used for generating the README file and should be updated for changes that are not rules documentation links and their corresponding sections.</li> </ol> <p>You may also want to take a look at docs.ts to modify how the generated files are created.</p>"},{"location":"contributing/documentation/#generating-documentation","title":"Generating Documentation","text":"<p>Before trying to generate documentation, make sure that you have setup the Linter for local use as described in the Setup Guide.</p> <p>Once that is done, to update the documentation you can run <code>npm run compile</code> if you need to compile the code as well or just run <code>npm run docs</code> which just generates the documentation.</p> <p>Not seeing changes to docs?</p> <p>If you run <code>npm run docs</code>, but do not see any changes to any of the generated files, try running <code>npm run build</code> and then try again. The changes may not have been built since they were made.</p>"},{"location":"contributing/getting-setup/","title":"Setting Up the Linter","text":"<p>You will want to start by forking this repository. Once that is done, you will want to clone your fork of the repository. The command should look something like the following:</p> <pre><code>git clone https://github.com/{USERNAME_HERE}/obsidian-linter/\n</code></pre>"},{"location":"contributing/getting-setup/#node-and-npm","title":"Node and NPM","text":"<p>Next you will want to install the appropriate versions of Node and NPM. This plugin requires Node version <code>15.x</code> or higher.</p>"},{"location":"contributing/getting-setup/#windows","title":"Windows","text":"<p>Install the version of Node you would like. Make sure to add it to your path under environment variables.</p>"},{"location":"contributing/getting-setup/#linux-mac-and-windows-via-wslwsl2","title":"Linux, Mac, and Windows via WSL/WSL2","text":"<p>It is recommended that you use NVM which is a node version manager that comes in handy when swapping and installing node versions, especially since most linux package managers do not have the needed node version in the standard packages.</p>"},{"location":"contributing/getting-setup/#install-dependencies","title":"Install Dependencies","text":"<p>Now that Node and NPM are installed, we can go ahead and run <code>npm ci</code> from the base of the cloned repository. This should install the necessary dependencies for working on the plugin. The command may take several minutes to complete.</p> <p>Once this is done, you should be all set up for contributing to the plugin.</p>"},{"location":"contributing/open-a-pr/","title":"Open a Pull Request","text":"<p>Before opening a pull request, please start of by linting the repository.</p>"},{"location":"contributing/open-a-pr/#linting-the-repository","title":"Linting the Repository","text":"<p>Files should be linted prior to creating a pull request. The linter will make sure that the code follows the desired code style and formats the files as needed. The linter can be run by <code>npm run lint</code> or <code>npm run compile</code>.</p> <p>Trailing whitespace and empty line preservation</p> <p>The file linter removes trailing spaces and blank lines. If they are essential use <code>${''}</code> at the end of a line or by itself on a line to preserve trailing whitespace or empty lines.</p> <pre><code>const str = dedent`\n  line with essential trailing spaces   ${''}\n  ${''}\n  previous line is completely blank\n`;\n</code></pre>"},{"location":"contributing/open-a-pr/#run-unit-tests","title":"Run Unit Tests","text":"<p>The next thing to do is to make sure that all tests are passing by running <code>npm run test</code>. If any tests fail, please get them working before opening a pull request.</p>"},{"location":"contributing/open-a-pr/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>Once all changes have been made, any applicable tests added, and the file linting has applied formats and identified no issues, then it is time to create a pull request.</p> <p>When creating a pull request, please make sure that if it fixes a bug, adds a requested feature, or implements a suggested refactor, please make sure to include <code>Fixes #{ISSUE_NUMBER}</code>. This will help associate the change with the created issue and it will help make sure that issues are closed when their fixes are merged.</p> <p>Please include a little bit about what the pull request does in the description of the ticket to help give some context to the developers that review the pull request.</p>"},{"location":"contributing/refactoring/","title":"Refactoring Code","text":"<p>Before trying to refactor code or create a proof of concept, make sure that you have setup the Linter for local use as described in the Setup Guide.</p>"},{"location":"contributing/refactoring/#create-an-issue","title":"Create an Issue","text":"<p>When planning to refactor large portions of code, please create an issue on the repository before creating a pull request, so that the suggested refactor can be looked at before any work or proof of concept is requested. This will help save time for everyone involved.</p>"},{"location":"contributing/refactoring/#proof-of-concept","title":"Proof of Concept","text":"<p>A proof of concept may be requested for code refactors or code cleanup which should be a small example of the refactor that will be created. It should be created as a draft pull request.</p> <p>These types of pull requests should give an idea of the suggested change without spending the time needed to convert all code to use the suggestion. It can help display the strengths and weaknesses of the suggested change.</p>"},{"location":"contributing/refactoring/#code-changes","title":"Code Changes","text":"<p>Once the proof of concept, if requested, or refactor idea gets the green light, feel free to create a pull request with the suggested changes present or convert the draft pull request to a regular pull request if it already exists.</p>"},{"location":"contributing/releasing/","title":"Creating a Release","text":"<p>In order to create a release, there are a couple of steps to go through:</p> <p>Start by updating the version number in <code>package.json</code> and <code>manifest.json</code>. Then add a new version entry into <code>versions.json</code>.</p> <p>A version entry in <code>versions.json</code> would like something like the following: <pre><code>\"{PLUGIN_VERSION}\": \"{MINIMUM_OBSIDIAN_VERSION}\" // i.e. \"1.3.4\": \"0.9.7\" \n</code></pre> If you are not sure what version to use for <code>{MINIMUM_OBSIDIAN_VERSION}</code>, use your current version of Obsidian.</p> <p>Now that the versions are updated, create a pull request and merge the changes into master. Once that is done go to the releases tab and select draft a new release. Then you can type in the new tag which should be the version of the release (i.e. <code>1.3.4</code>) and have it create the tag on creation of the release. Autofill the release using the option to \"Generate release notes\". Then attach the compiled <code>main.js</code> and <code>manifest.json</code> to the release before publishing the release.</p>"},{"location":"contributing/testing/","title":"Testing","text":"<p>Before trying to run tests, make sure that you have setup the Linter for local use as described in the Setup Guide.</p> <p>Testing the Linter is broken into unit tests that can be run against logic inside of the repository and integration testing which general applies to interacting with Obsidian, verifying how UI elements look, and making sure the plugin still loads.</p>"},{"location":"contributing/testing/#unit-testing","title":"Unit Testing","text":"<p>Unit tests are a great way to make sure that the rules and other logic within the Linter is working as intended and expected especially over time with code refactoring, logical changes, and bug fixes. This helps make sure that the logic still works like it did before changes were made.</p> <p>Unit test reliability</p> <p>Unit tests are only as reliable as the quality of the tests. So if the tests are poor and barely test the functionality of the rules or logic in question, the unit tests can give a false impression that the code is working.</p>"},{"location":"contributing/testing/#what-do-unit-tests-look-like-in-the-linter","title":"What Do Unit Tests Look Like in the Linter?","text":"<p>There are really 2 broad categories of unit tests in the Linter: rule examples and test suites.</p>"},{"location":"contributing/testing/#rule-examples","title":"Rule Examples","text":"<p>These are the examples that you find in the definition of rules themselves. You can find more on them in Rule Examples under Adding a Rule.</p>"},{"location":"contributing/testing/#test-suites","title":"Test Suites","text":"<p>These are tests that reside in the <code>__tests__</code> directory. They can be broken into 2 categories themselves: general rule test suites and specific test suites.</p>"},{"location":"contributing/testing/#general-rule-test-suites","title":"General Rule Test Suites","text":"<p>As the name suggests, these are test suites that follow a general format and each one is specific to a rule. For example, capitalize-headings.test.ts is a general rule test suite since it only has tests for Capitalize Headings.</p> <p>These rules follow the same kind of format:</p> <pre><code>import CapitalizeHeadings from '../src/rules/capitalize-headings';\nimport dedent from 'ts-dedent';\nimport {ruleTest} from './common';\n\nruleTest({\n  RuleBuilderClass: CapitalizeHeadings,\n  testCases: [\n    {\n      testName: 'Ignores not words',\n      before: dedent`\n        # h1\n        ## a c++ lan\n        ## this is a sentence.\n        ## I can't do this\n        ## comma, comma, comma\n        ## 1.1 the Header\n        ## \u00e9tat\n        ## this \u00e9tat\n      `,\n      after: dedent`\n        # H1\n        ## A c++ Lan\n        ## This is a Sentence.\n        ## I Can't Do This\n        ## Comma, Comma, Comma\n        ## 1.1 The Header\n        ## \u00c9tat\n        ## This \u00c9tat\n      `,\n      options: {\n        style: 'Title Case',\n      },\n    },\n    ...\n    { // accounts for https://github.com/platers/obsidian-linter/issues/601\n      testName: `Make sure that if the 1st word has a number in it, it will still be considered to be a word and have its first letter capitalized`,\n      before: dedent`\n        # EC2 instance\n        ## EC2 lab05 load balancer\n        ### lab07 bread maker\n      `,\n      after: dedent`\n        # EC2 instance\n        ## EC2 lab05 load balancer\n        ### Lab07 bread maker\n      `,\n      options: {\n        style: 'First letter',\n        ignoreCasedWords: true,\n      },\n    },\n  ],\n});\n</code></pre> <p>The file starts off with the imports which includes the Rule Options, any type imports it may need, and the <code>ruleTest</code> method which basically sets up the tests to be run as an array of tests:</p> <pre><code>import CapitalizeHeadings from '../src/rules/capitalize-headings';\nimport dedent from 'ts-dedent';\nimport {ruleTest} from './common';\n</code></pre> <p>After that comes the list of tests being passed into <code>ruleTest</code>:</p> <pre><code>ruleTest({\n  RuleBuilderClass: CapitalizeHeadings,\n  testCases: [\n    {\n      testName: 'Ignores not words',\n      before: dedent`\n        # h1\n        ## a c++ lan\n        ## this is a sentence.\n        ## I can't do this\n        ## comma, comma, comma\n        ## 1.1 the Header\n        ## \u00e9tat\n        ## this \u00e9tat\n      `,\n      after: dedent`\n        # H1\n        ## A c++ Lan\n        ## This is a Sentence.\n        ## I Can't Do This\n        ## Comma, Comma, Comma\n        ## 1.1 The Header\n        ## \u00c9tat\n        ## This \u00c9tat\n      `,\n      options: {\n        style: 'Title Case',\n      },\n    },\n    ...\n    { // accounts for https://github.com/platers/obsidian-linter/issues/601\n      testName: `Make sure that if the 1st word has a number in it, it will still be considered to be a word and have its first letter capitalized`,\n      before: dedent`\n        # EC2 instance\n        ## EC2 lab05 load balancer\n        ### lab07 bread maker\n      `,\n      after: dedent`\n        # EC2 instance\n        ## EC2 lab05 load balancer\n        ### Lab07 bread maker\n      `,\n      options: {\n        style: 'First letter',\n        ignoreCasedWords: true,\n      },\n    },\n  ],\n});\n</code></pre> <p><code>rulesTest</code> expects the <code>RuleBuilderClass</code> to be the rule options class reference and then <code>testCases</code> which is a list of test cases for the rule. The test cases are almost identical to Rule Examples however they use <code>testName</code> instead of <code>description</code>.</p>"},{"location":"contributing/testing/#specific-test-suites","title":"Specific Test Suites","text":"<p>These test suites are generally tailored to a specific function that exists that is not a rule. They are generally meant to make sure that certain functions still work as intended. An example of a specific test suite is get-all-custom-ignore-sections-in-text.test.ts. The logic for these tests tries to follow a similar setup to that of a general rule test suite, but is tailored to the needs of the specific function that is being tested:</p> <pre><code>import {getAllCustomIgnoreSectionsInText} from '../src/utils/mdast';\nimport dedent from 'ts-dedent';\n\ntype customIgnoresInTextTestCase = {\n  name: string,\n  text: string,\n  expectedCustomIgnoresInText: number,\n  expectedPositions: {startIndex:number, endIndex: number}[]\n};\n\nconst getCustomIgnoreSectionsInTextTestCases: customIgnoresInTextTestCase[] = [\n  {\n    name: 'when no custom ignore start indicator is present, no positions are returned',\n    text: dedent`\n      Here is some text\n      Here is some more text\n    `,\n    expectedCustomIgnoresInText: 0,\n    expectedPositions: [],\n  },\n  {\n    name: 'when no custom ignore start indicator is present, no positions are returned even if custom ignore end indicator is present',\n    text: dedent`\n      Here is some text\n      &lt;!-- linter-enable --&gt;\n      Here is some more text\n    `,\n    expectedCustomIgnoresInText: 0,\n    expectedPositions: [],\n  },\n  {\n    name: 'a simple example of a start and end custom ignore indicator results in the proper start and end positions for the ignore section',\n    text: dedent`\n      Here is some text\n      &lt;!-- linter-disable --&gt;\n      This content will be ignored\n      So any format put here gets to stay as is\n      &lt;!-- linter-enable --&gt;\n      More text here...\n    `,\n    expectedCustomIgnoresInText: 1,\n    expectedPositions: [{startIndex: 18, endIndex: 135}],\n  },\n  {\n    name: 'when a custom ignore start indicator is not followed by a custom ignore end indicator in the text, the end is considered to be the end of the text',\n    text: dedent`\n      Here is some text\n      &lt;!-- linter-disable --&gt;\n      This content will be ignored\n      So any format put here gets to stay as is\n      More text here...\n    `,\n    expectedCustomIgnoresInText: 1,\n    expectedPositions: [{startIndex: 18, endIndex: 129}],\n  },\n  {\n    name: 'when a custom ignore start indicator shows up midline, it ignores the part in question',\n    text: dedent`\n      Here is some text&lt;!-- linter-disable --&gt;here is some ignored text&lt;!-- linter-enable --&gt;\n      This content will be ignored\n      So any format put here gets to stay as is\n      More text here...\n    `,\n    expectedCustomIgnoresInText: 1,\n    expectedPositions: [{startIndex: 17, endIndex: 87}],\n  },\n  {\n    name: 'when a custom ignore start indicator does not follow the exact syntax, it is counted as existing when it is a single-line comment',\n    text: dedent`\n      Here is some text&lt;!-- linter-disable--&gt;here is some ignored text&lt;!-------------         linter-enable ------&gt;\n      This content will be ignored\n      So any format put here gets to stay as is\n      More text here...\n    `,\n    expectedCustomIgnoresInText: 1,\n    expectedPositions: [{startIndex: 17, endIndex: 109}],\n  },\n  {\n    name: 'multiple matches can be returned',\n    text: dedent`\n      Here is some text&lt;!-- linter-disable --&gt;here is some ignored text&lt;!-- linter-enable --&gt;\n      This content will be ignored\n      So any format put here gets to stay as is\n      More text here...\n      ${''}\n      &lt;!-- linter-disable --&gt;\n      We want to ignore the following as we want to preserve its format\n        -&gt; level 1\n          -&gt; level 1.3\n        -&gt; level 2\n      Finish\n    `,\n    expectedCustomIgnoresInText: 2,\n    expectedPositions: [{startIndex: 17, endIndex: 87}, {startIndex: 178, endIndex: 316}],\n  },\n];\n\ndescribe('Get All Custom Ignore Sections in Text', () =&gt; {\n  for (const testCase of getCustomIgnoreSectionsInTextTestCases) {\n    it(testCase.name, () =&gt; {\n      const customIgnorePositions = getAllCustomIgnoreSectionsInText(testCase.text);\n\n      expect(customIgnorePositions.length).toEqual(testCase.expectedCustomIgnoresInText);\n      expect(customIgnorePositions).toEqual(testCase.expectedPositions);\n    });\n  }\n});\n</code></pre> <p>These tests general start by importing the function to test followed by the format of how the test cases will be formatted:</p> <pre><code>import {getAllCustomIgnoreSectionsInText} from '../src/utils/mdast';\nimport dedent from 'ts-dedent';\n\ntype customIgnoresInTextTestCase = {\n  name: string,\n  text: string,\n  expectedCustomIgnoresInText: number,\n  expectedPositions: {startIndex:number, endIndex: number}[]\n};\n</code></pre> <p>After that comes the test cases and then the running of the test cases:</p> <pre><code>describe('Get All Custom Ignore Sections in Text', () =&gt; {\n  for (const testCase of getCustomIgnoreSectionsInTextTestCases) {\n    it(testCase.name, () =&gt; {\n      const customIgnorePositions = getAllCustomIgnoreSectionsInText(testCase.text);\n\n      expect(customIgnorePositions.length).toEqual(testCase.expectedCustomIgnoresInText);\n      expect(customIgnorePositions).toEqual(testCase.expectedPositions);\n    });\n  }\n});\n</code></pre> <p>This is the format you will want to use for specific test suites if at all possible. There are some scenarios where the test cases do vary so much that creating a type for the test case is not feasible and so individual tests are used like what rules-runner.test.ts does.</p>"},{"location":"contributing/testing/#should-you-add-a-test","title":"Should You Add a Test?","text":"<p>You may be wondering whether you should or should not add a test to the Linter. If you do any of the following, you should add a unit test:</p> Situation Tests to Include Add a new rule Examples on the rule that cover general use casesUnit tests in a test suite for the new rule that cover cases that make the examples too long or that are edge cases Add a new option to a rule An example or examples on the rule to cover the general scenarios of the new optionUnit tests in a test suite for the rule that cover cases that make the examples too long or that are edge cases Refactoring code This may require a new test suite that is designed specifically for the refactored code (for example get-all-tables-in-text.test.ts) or new unit tests in a test suite that uses the logic that was refactored if it has changed the edge cases that are possible Fixing a bug When a bug directly affects a single rule and can be reproduced by setting up a case in the rule's test suite, add that rule with a comment referencing back to the issue that reported the problem* <p>*Here is what an example of bug fix unit test looks like in a general rule test suite:</p> <pre><code>{ // accounts for https://github.com/platers/obsidian-linter/issues/412\n  testName: 'H1s become H2s and all other headers are shifted accordingly when an H1 starts a file',\n  before: dedent`\n    # H1\n    ### H3\n    #### H4\n    # H1\n    #### H4\n    ###### H6\n  `,\n  after: dedent`\n    ## H1\n    ### H3\n    #### H4\n    ## H1\n    ### H4\n    #### H6\n  `,\n  options: {\n    startAtH2: true,\n  },\n},\n</code></pre>"},{"location":"contributing/testing/#adding-tests","title":"Adding Tests","text":"<p>Where to add a test depends on what kind of test you are adding. If it is an example, it should reside in the specific rule that it pertains to. If it is meant to be a bug fix, edge case test, a test for a non-rule function, or a large test, then adding it to an existing or new test suite makes the most sense.</p> <p>When adding an example test case, please follow the format described by Rule Examples. When adding an test suite test case, please follow the format described above by Test Suites making sure that any newly added test suites have dashes between words in the filename.</p> <p>Once a test is added, you will want to run the tests, see Running Tests.</p>"},{"location":"contributing/testing/#running-tests","title":"Running Tests","text":"<p>Tests are run by jest and running them varies depending on whether you want to run all tests or one or more test suites.</p>"},{"location":"contributing/testing/#all-tests","title":"All Tests","text":"<p>They can be run by either running <code>npm run test</code> or <code>npm run compile</code>. The output will let you know how many of the tests passed and if any failed, why they failed using a visual comparison of what was expected versus what was received.</p> <p>Advanced tests</p> <p>When advanced tests fail, their output is harder to read since it uses a regex match. It is recommended that you use the output of the expected versus actual values for the normal tests to determine what went wrong with the test.</p>"},{"location":"contributing/testing/#a-specific-test-suite","title":"A Specific Test Suite","text":"<p>If you know the suite of tests that you would like to run, you can use <code>npm run test-suite TEST_SUITE_HERE</code> to run just the desired test suite. The test suite names are the names of the files in <code>__tests</code> minus <code>.test.ts</code>. You only need to use part of a file name for a test suite to be used as it checks that the test suite name starts with the value of <code>TEST_SUITE_HERE</code>.</p> <p>So for example, <code>npm run test-suite format-yaml-arrays</code> would run the test suite for formatting YAML arrays since that is the only test suite that starts with <code>format-yaml-arrays</code>. While, <code>npm run test-suite header</code> would run all test suites that start with the word <code>header</code>.</p> <p>Note</p> <p>Running a test suite for a specific rule or rules does not run the examples for that rule(s) as all examples are bundled together in the examples test suite which can be run via <code>npm run test-suite examples</code>.</p>"},{"location":"contributing/testing/#integration-testing","title":"Integration Testing","text":"<p>Integration tests are reserved for things that are not easily tested with unit tests. When doing these tests, you will need to load your local copy of the Linter into Obsidian and then run the Linter with the desired rules turned on.</p>"},{"location":"contributing/testing/#when-should-i-do-integration-testing","title":"When Should I Do Integration Testing?","text":"<p>When a rule is changed to run as part of the rules to run after or rules to run before the normal rules in rules-runner.ts.</p> <p>When a UI change is made. For example a wording change or a display element changes like CSS or HTML changes.</p> <p>When the issue was caused by multiple rules making changes to the contents of a file to create an issue. When this happens, the only way I have found to be reliable when testing that the issue is resolved is via integration testing.</p>"},{"location":"contributing/translation/","title":"Translating the Linter","text":"<p>If you would like to help out by translating the Linter there are several ways in which you can help out. The following instructions should help you with translating the Linter.</p> <p>Using translation helper</p> <p>Before being able to translate using the translation helper, you will need to make sure that you have setup the Linter for local use as described in the Setup Guide.</p> <p>Before we can make changes to a translation in the Linter, we will want to know what a translation is and how they work.</p>"},{"location":"contributing/translation/#what-is-a-translation","title":"What is a Translation?","text":"<p>A translation for the Linter is a language file that contains the string values of the text the Linter uses for logs and the UI in Obsidian. The files for the languages are located under <code>src/lang/locale/</code>. Each language has a file that is named using the 2 letter language abbreviation. If the language is for a specific dialect (i.e. simplified Chinese which or British English), make sure it starts with the 2 letter language code followed by the 2 letter code for the language dialect in question.</p> <p>An example of a regular translation file with no dialect is en.ts. An example of a translation file for a dialect is zh-cn.ts.</p>"},{"location":"contributing/translation/#translation-file-structure","title":"Translation File Structure","text":"<p>A translation file is a TypeScript file that is structured as a JSON object. That is to say it is a key value mapping with the nesting of values in it. The structures of all translation files are to follow the structure of en.ts which is the source of truth for the keys that exist for use in the Linter. So if you need to add a new value or change the structure of the existing values, you will first need to update them in this file.</p> <p>The following is the general structure of <code>en.ts</code>:</p> <pre><code>// English\n\nexport default {\n  // UI text for the Obsidian commands that the Linter uses\n  'commands': {...},\n\n  // logs are general pieces of text to either partially include in the UI or to just put in the developer console.\n  'logs': {...},\n\n  'notice-text': {\n    'empty-clipboard': 'There is no clipboard content.',\n    'characters-added': 'characters added',\n    'characters-removed': 'characters removed',\n  },\n\n  // settings.ts\n  'linter-title': 'Linter',\n  'empty-search-results-text': 'No settings match search',\n\n  // lint-confirmation-modal.ts\n  'warning-text': 'Warning',\n  'file-backup-text': 'Make sure you have backed up your files.',\n\n  // tabs contains tab specific UI text and setting text (tab specific setting text is text not generated by rules)\n  'tabs': {\n    'names': {\n      // tab.ts\n      'general': 'General Settings',\n      'custom': 'Custom Settings',\n      'yaml': 'YAML Settings',\n      'heading': 'Heading Settings',\n      'content': 'Content Settings',\n      'footnote': 'Footnote Settings',\n      'spacing': 'Spacing Settings',\n      'paste': 'Paste Settings',\n      'debug': 'Debug Settings',\n    },\n    // tab-searcher.ts\n    'default-search-bar-text': 'Search all settings',\n    'general': {...},\n    'debug': {...},\n  },\n\n  // options is for specific UI elements that help out with settings\n  'options': {\n    'custom-command': {...},\n    'custom-replace': {...},\n  },\n\n  // rules is where you put names and descriptions for rules and rule settings, but not dropdown record values\n  'rules': {...},\n\n  // These are the string values in the UI for enum values and thus they do not follow the key format as used above\n  // they are also for dropdown records that come from union types\n  'enums': {...},\n};\n</code></pre> <p>As you can see the Linter is broken into the several sections which each have their own uses:</p> Name Description <code>commands</code> The portion of the language text to use for Obsidian commands that the Linter creates. <code>logs</code> The portion of the language text to use for general pieces of text to either partially include in the UI or to just put in the developer console. <code>notice-text</code> The portion of the language text to use for notices that are used by the Linter to alert the user about something that is not an error. <code>tabs</code> The portion of the language text to use for tab specific UI text and setting text (tab specific setting text is text not generated by rules). <code>options</code> The portion of the language text to use for custom Linter components that in general help out with settings. Things like custom commands and custom regex replace have components that have their text listed in this section. <code>rules</code> The portion of the language text to use for names and descriptions for rules and rule settings, but not dropdown record values. <code>enums</code> The portion of the language text to use for values in the UI for enum values and thus they do not follow the key format as used above. It is also for dropdown records that come from union types."},{"location":"contributing/translation/#how-are-partial-translations-handled","title":"How Are Partial Translations Handled?","text":"<p>Any missing keys in a language will be defaulted to its English values which allows for partial translation of a language. This way you can add as many or as few translations to the translation file at any given time.</p>"},{"location":"contributing/translation/#addingupdating-values-for-an-existing-language","title":"Adding/Updating Values for an Existing Language","text":"<p>If you would like to add a translation to a language the Linter already has a file for under <code>src/lang/locale</code>, you can add values manually to the desired file or via running <code>npm run translate</code>. If you choose to use the script, you will be able to add a translation value for a specific language, list untranslated keys in a specified language, replace translated value with a new value for a specified key, translate all untranslated keys in a language one at a time</p> <p>If you choose to do so manually, you will need to copy the structure found in en.ts to the language that you want to add values for.</p> <p>Translation helper requirements</p> <p>The translation helper requires that you have already followed the steps to setup npm and have installed its dependencies for this project.</p> <p>Once the translation(s) has/have been added, the translation(s) should be ready for review. So go on ahead and open a pull request.</p>"},{"location":"contributing/translation/#adding-a-new-language-translation","title":"Adding a New Language Translation","text":"<p>If you want to add language support for a language, but the file does not already exist, there are a couple of steps that need to be followed for adding that language to the Linter.</p>"},{"location":"contributing/translation/#1-create-the-translation-file","title":"1. Create the Translation File","text":"<p>Determine the name for the translation file as described by What is a Translation?. Once you know what the name of the file should be, create a new file for it under <code>src/lang/locale/</code>. You will want to make sure that the new file follows the following format:</p> <pre><code>// {NAME_OF_LANGUAGE_IN_LANGUAGE_HERE}\n\nexport default {};\n</code></pre> <p>We will use an example of adding Spanish as the new language. The 2 letter abbreviation for Spanish is <code>es</code> so the new file will be called <code>es.ts</code>.</p> <p>So we will create a file under <code>es.ts</code> that as follows:</p> <pre><code>// Espa\u00f1ol\n\nexport default {};\n</code></pre> <p>Note</p> <p>The name of the language in the comment is the name used to refer to the language of Spanish in Spanish. Doing this helps native speakers better identify the language and dialect that the translation is for.</p>"},{"location":"contributing/translation/#2-update-imports-in-language-helper","title":"2. Update Imports in Language Helper","text":"<p>Now that the language file has been created it exists and is ready to be used by the Linter. The only problem is that the Linter does not know that the file exists. So we need to update helpers.ts and add the new file to the list of files it knows about. To do this add the following line to helpers.ts:</p> <pre><code>import {LANGUAGE_SHORT_CODE} from './locale/{LANGUAGE_SHORT_CODE}';\n</code></pre> <p>Then the <code>localeMap</code> in helpers.ts needs to have an entry added in it for the new language:</p> <pre><code>export const localeMap: { [k: string]: LanguageLocale } = {\n  en,\n  {LANGUAGE_SHORT_CODE},\n  ...\n};\n</code></pre> <p>Lastly you will need to make sure that you add the proper value to the list of locales to their corresponding file names:</p> <pre><code>export const localeToFileName: { [k: string]: string} = {\n  'en': 'en',\n  '{LANGUAGE_SHORT_CODE}': '{LANGUAGE_SHORT_CODE}',\n  ...\n}\n</code></pre> <p>Why add values to locale to file name object?</p> <p>This is is done because it allows the UTs to validate that there is a unique file that exists for each locale that the Linter users.</p> <p>In the case of adding Spanish, we would make the following changes:</p> <pre><code>import es from './locale/es'; // import new language into helper file\n...\nexport const localeMap: { [k: string]: LanguageLocale } = {\n  en,\n  es, // add new language to locale mapping\n  ...\n};\n\nexport const localeToFileName: { [k: string]: string} = {\n  'en': 'en',\n  'es': 'es', // add new language locale to file name mapping\n  ...\n}\n</code></pre> <p>Special Considerations for Locale Map</p> <p>In some cases, the language name of the file and the language name of the Obsidian locale used are different. In these cases, you will want to make sure to map the Obsidian locale to the new language:</p> <pre><code>export const localeMap: { [k: string]: LanguageLocale } = {\n  en,\n  es,\n  'pt-BR': ptBR, // special mapping of Obsidian locale to language\n  ...\n  'zh-TW': zhTW, // special mapping of Obsidian locale to language\n  'zh': zhCN, // special mapping of Obsidian locale to language\n};\n\nexport const localeToFileName: { [k: string]: string} = {\n  'en': 'en',\n  'es': 'es',\n  'pt-BR': 'pt-br', // special mapping of Obsidian locale to language file name\n  ...\n  'zh-TW': 'zh-tw', // special mapping of Obsidian locale to language file name\n  'zh': 'zh-cn', // special mapping of Obsidian locale to language file name\n};\n</code></pre>"},{"location":"contributing/translation/#3-add-translations-to-file","title":"3. Add Translations to File","text":"<p>Now that the translation file has been created and the language helper knows about the new language and what Obsidian locale to use it for, the next thing to do is add translations to the newly created file.</p>"},{"location":"contributing/translation/#4-open-a-pull-request","title":"4. Open a Pull Request","text":"<p>Once the translation(s) has/have been added, the new language addition should be ready for review. So go on ahead and open a pull request.</p>"},{"location":"settings/content-rules/","title":"Content Rules","text":""},{"location":"settings/content-rules/#content-rules","title":"Content Rules","text":""},{"location":"settings/content-rules/#auto-correct-common-misspellings","title":"Auto-correct Common Misspellings","text":"<p>Alias: <code>auto-correct-common-misspellings</code></p> <p>Uses a dictionary of common misspellings to automatically convert them to their proper spellings. See auto-correct map for the full list of auto-corrected words. Note: this list can work on text from multiple languages, but this list is the same no matter what language is currently in use.</p>"},{"location":"settings/content-rules/#options","title":"Options","text":"Name Description List Items Default Value <code>Ignore Words</code> A comma separated list of lowercased words to ignore when auto-correcting N/A <code>Skip Words with Multiple Capitals</code> Will skip any files that have a capital letter in them other than as the first letter of the word. Acronyms and some other words can benefit from this. It may cause issues with proper nouns being properly fixed. N/A false <code>Extra Auto-Correct Source Files</code> These are files that have a markdown table in them that have the initial word and the word to correct it to (these are case insensitive corrections). Note: the tables used should have the starting and ending <code>|</code> indicators present for each line. N/A"},{"location":"settings/content-rules/#additional-info","title":"Additional Info","text":""},{"location":"settings/content-rules/#how-to-use-custom-misspellings","title":"How to Use Custom Misspellings","text":"<p>There is a default list of common misspellings that is used as the base for how this rule works. However, there may be instances where the user may want to add their own list of misspellings to handle. In those scenarios, they can add files to the list of files that have custom misspellings in them.</p>"},{"location":"settings/content-rules/#format","title":"Format","text":"<p>A file that has custom misspellings in them can have any content in them. But the only content that will be parsed as custom misspellings should be found in a two column table. For example the following table will result in <code>th</code> being replaced with <code>the</code> and <code>tht</code> being replaced with <code>that</code>:</p> <pre><code>The following is a table with custom misspellings:\n| Replace | With |\n| ------- | ---- |\n| th | the |\n| tht | that |\n</code></pre> <p>Note</p> <p>The first two lines of the table are skipped (the header and separator) and all rows after that must start and end with a pipe (<code>|</code>). If any do not start or end with a pipe or they have more than 2 columns, then they will be skipped.</p>"},{"location":"settings/content-rules/#current-limitations","title":"Current Limitations","text":"<ul> <li>The list of custom replacements is only loaded automatically when the plugin first lints a file or when the file is added to the list of files that include custom misspellings<ul> <li>There is an option to manually rerun the parse custom misspelling files from the Auto-Correct Common Misspellings settings</li> </ul> </li> <li>There is no way to specify that a word is to always be capitalized<ul> <li>This is due to how the auto-correct rule was designed as it sets the first letter of the replacement word to the case of the first letter of the word being replaced</li> </ul> </li> </ul>"},{"location":"settings/content-rules/#examples","title":"Examples","text":"Auto-correct misspellings in regular text, but not code blocks, math blocks, YAML, or tags  Before:  <pre><code>---\nkey: absoltely\n---\n\nI absoltely hate when my codeblocks get formatted when they should not be.\n\n```\n# comments absoltely can be helpful, but they can also be misleading\n```\n\nNote that inline code also has the applicable spelling errors ignored: `absoltely` \n\n$$\nMath block absoltely does not get auto-corrected.\n$$\n\nThe same $ defenately $ applies to inline math.\n\n#defenately stays the same\n</code></pre>  After:  <pre><code>---\nkey: absoltely\n---\n\nI absolutely hate when my codeblocks get formatted when they should not be.\n\n```\n# comments absoltely can be helpful, but they can also be misleading\n```\n\nNote that inline code also has the applicable spelling errors ignored: `absoltely` \n\n$$\nMath block absoltely does not get auto-corrected.\n$$\n\nThe same $ defenately $ applies to inline math.\n\n#defenately stays the same\n</code></pre> Auto-correct misspellings keeps first letter's case  Before:  <pre><code>Accodringly we made sure to update logic to make sure it would handle case sensitivity.\n</code></pre>  After:  <pre><code>Accordingly we made sure to update logic to make sure it would handle case sensitivity.\n</code></pre> Links should not be auto-corrected  Before:  <pre><code>http://www.Absoltely.com should not be corrected\n</code></pre>  After:  <pre><code>http://www.Absoltely.com should not be corrected\n</code></pre> Auto-correct misspellings skips words with multiple capital letters in them if `Skip Words with Multiple Capitals` is Enabled  Before:  <pre><code>HSA here will not be auto-corrected to Has since it has more than one capital letter.\naADD will not be converted to add.\nBut this also affects javaSrript(what should be JavaScript) and other proper names as well which will not be auto-corrected.\n</code></pre>  After:  <pre><code>HSA here will not be auto-corrected to Has since it has more than one capital letter.\naADD will not be converted to add.\nBut this also affects javaSrript(what should be JavaScript) and other proper names as well which will not be auto-corrected.\n</code></pre>"},{"location":"settings/content-rules/#blockquote-style","title":"Blockquote Style","text":"<p>Alias: <code>blockquote-style</code></p> <p>Makes sure the blockquote style is consistent.</p>"},{"location":"settings/content-rules/#options_1","title":"Options","text":"Name Description List Items Default Value <code>Style</code> The style used on blockquote indicators <code>space</code>: &gt; indicator is followed by a space<code>no space</code>: &gt;indicator is not followed by a space <code>space</code>"},{"location":"settings/content-rules/#examples_1","title":"Examples","text":"When style = `space`, a space is added to blockquotes missing a space after the indicator  Before:  <pre><code>&gt;Blockquotes will have a space added if one is not present\n&gt; Will be left as is.\n\n&gt; Nested blockquotes are also updated\n&gt;&gt;Nesting levels are handled correctly\n&gt;&gt; Even when only partially needing updates\n&gt; &gt;Updated as well\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Is handled too\n&gt; &gt; &gt;&gt;&gt; As well\n\n&gt; &lt;strong&gt;Note that html is not affected in blockquotes&lt;/strong&gt;\n</code></pre>  After:  <pre><code>&gt; Blockquotes will have a space added if one is not present\n&gt; Will be left as is.\n\n&gt; Nested blockquotes are also updated\n&gt; &gt; Nesting levels are handled correctly\n&gt; &gt; Even when only partially needing updates\n&gt; &gt; Updated as well\n&gt; &gt; &gt; &gt; &gt; &gt; &gt; Is handled too\n&gt; &gt; &gt; &gt; &gt; As well\n\n&gt; &lt;strong&gt;Note that html is not affected in blockquotes&lt;/strong&gt;\n</code></pre> When style = `no space`, spaces are removed after a blockquote indicator  Before:  <pre><code>&gt;    Multiple spaces are removed\n&gt; &gt; Nesting is handled\n&gt; &gt; &gt; &gt; &gt;  Especially when multiple levels are involved\n&gt; &gt;&gt;&gt; &gt; Even when partially correct already, it is handled\n</code></pre>  After:  <pre><code>&gt;Multiple spaces are removed\n&gt;&gt;Nesting is handled\n&gt;&gt;&gt;&gt;&gt;Especially when multiple levels are involved\n&gt;&gt;&gt;&gt;&gt;Even when partially correct already, it is handled\n</code></pre>"},{"location":"settings/content-rules/#convert-bullet-list-markers","title":"Convert Bullet List Markers","text":"<p>Alias: <code>convert-bullet-list-markers</code></p> <p>Converts common bullet list marker symbols to markdown list markers.</p>"},{"location":"settings/content-rules/#examples_2","title":"Examples","text":"Converts \u2022  Before:  <pre><code>\u2022 item 1\n\u2022 item 2\n</code></pre>  After:  <pre><code>- item 1\n- item 2\n</code></pre> Converts \u00a7  Before:  <pre><code>\u2022 item 1\n  \u00a7 item 2\n  \u00a7 item 3\n</code></pre>  After:  <pre><code>- item 1\n  - item 2\n  - item 3\n</code></pre>"},{"location":"settings/content-rules/#default-language-for-code-fences","title":"Default Language For Code Fences","text":"<p>Alias: <code>default-language-for-code-fences</code></p> <p>Add a default language to code fences that do not have a language specified.</p>"},{"location":"settings/content-rules/#options_2","title":"Options","text":"Name Description List Items Default Value <code>Programming Language</code> Leave empty to do nothing. Languages tags can be found here. N/A"},{"location":"settings/content-rules/#examples_3","title":"Examples","text":"Add a default language `javascript` to code blocks that do not have a language specified  Before:  <pre><code>```\nvar temp = 'text';\n// this is a code block\n```\n</code></pre>  After:  <pre><code>```javascript\nvar temp = 'text';\n// this is a code block\n```\n</code></pre> If a code block already has a language specified, do not change it  Before:  <pre><code>```javascript\nvar temp = 'text';\n// this is a code block\n```\n</code></pre>  After:  <pre><code>```javascript\nvar temp = 'text';\n// this is a code block\n```\n</code></pre> Empty string as the default language will not add a language to code blocks  Before:  <pre><code>```\nvar temp = 'text';\n// this is a code block\n```\n</code></pre>  After:  <pre><code>```\nvar temp = 'text';\n// this is a code block\n```\n</code></pre>"},{"location":"settings/content-rules/#emphasis-style","title":"Emphasis Style","text":"<p>Alias: <code>emphasis-style</code></p> <p>Makes sure the emphasis style is consistent.</p>"},{"location":"settings/content-rules/#options_3","title":"Options","text":"Name Description List Items Default Value <code>Style</code> The style used to denote emphasized content <code>consistent</code>: Makes sure the first instance of emphasis is the style that will be used throughout the document<code>asterisk</code>: Makes sure * is the emphasis indicator<code>underscore</code>: Makes sure _ is the emphasis indicator <code>consistent</code>"},{"location":"settings/content-rules/#examples_4","title":"Examples","text":"Emphasis indicators should use underscores when style is set to 'underscore'  Before:  <pre><code># Emphasis Cases\n\n*Test emphasis*\n* Test not emphasized *\nThis is *emphasized* mid sentence\nThis is *emphasized* mid sentence with a second *emphasis* on the same line\nThis is ***bold and emphasized***\nThis is ***nested bold** and ending emphasized*\nThis is ***nested emphasis* and ending bold**\n\n**Test bold**\n\n* List Item1 with *emphasized text*\n* List Item2\n</code></pre>  After:  <pre><code># Emphasis Cases\n\n_Test emphasis_\n* Test not emphasized *\nThis is _emphasized_ mid sentence\nThis is _emphasized_ mid sentence with a second _emphasis_ on the same line\nThis is _**bold and emphasized**_\nThis is _**nested bold** and ending emphasized_\nThis is **_nested emphasis_ and ending bold**\n\n**Test bold**\n\n* List Item1 with _emphasized text_\n* List Item2\n</code></pre> Emphasis indicators should use asterisks when style is set to 'asterisk'  Before:  <pre><code># Emphasis Cases\n\n_Test emphasis_\n_ Test not emphasized _\nThis is _emphasized_ mid sentence\nThis is _emphasized_ mid sentence with a second _emphasis_ on the same line\nThis is ___bold and emphasized___\nThis is ___nested bold__ and ending emphasized_\nThis is ___nested emphasis_ and ending bold__\n\n__Test bold__\n</code></pre>  After:  <pre><code># Emphasis Cases\n\n*Test emphasis*\n_ Test not emphasized _\nThis is *emphasized* mid sentence\nThis is *emphasized* mid sentence with a second *emphasis* on the same line\nThis is *__bold and emphasized__*\nThis is *__nested bold__ and ending emphasized*\nThis is __*nested emphasis* and ending bold__\n\n__Test bold__\n</code></pre> Emphasis indicators should use consistent style based on first emphasis indicator in a file when style is set to 'consistent'  Before:  <pre><code># Emphasis First Emphasis Is an Asterisk\n\n*First emphasis*\nThis is _emphasized_ mid sentence\nThis is *emphasized* mid sentence with a second _emphasis_ on the same line\nThis is *__bold and emphasized__*\nThis is *__nested bold__ and ending emphasized*\nThis is **_nested emphasis_ and ending bold**\n\n__Test bold__\n</code></pre>  After:  <pre><code># Emphasis First Emphasis Is an Asterisk\n\n*First emphasis*\nThis is *emphasized* mid sentence\nThis is *emphasized* mid sentence with a second *emphasis* on the same line\nThis is *__bold and emphasized__*\nThis is *__nested bold__ and ending emphasized*\nThis is ***nested emphasis* and ending bold**\n\n__Test bold__\n</code></pre> Emphasis indicators should use consistent style based on first emphasis indicator in a file when style is set to 'consistent'  Before:  <pre><code># Emphasis First Emphasis Is an Underscore\n\n**_First emphasis_**\nThis is _emphasized_ mid sentence\nThis is *emphasized* mid sentence with a second _emphasis_ on the same line\nThis is *__bold and emphasized__*\nThis is _**nested bold** and ending emphasized_\nThis is __*nested emphasis* and ending bold__\n\n__Test bold__\n</code></pre>  After:  <pre><code># Emphasis First Emphasis Is an Underscore\n\n**_First emphasis_**\nThis is _emphasized_ mid sentence\nThis is _emphasized_ mid sentence with a second _emphasis_ on the same line\nThis is ___bold and emphasized___\nThis is _**nested bold** and ending emphasized_\nThis is ___nested emphasis_ and ending bold__\n\n__Test bold__\n</code></pre>"},{"location":"settings/content-rules/#no-bare-urls","title":"No Bare URLs","text":"<p>Alias: <code>no-bare-urls</code></p> <p>Encloses bare URLs with angle brackets except when enclosed in back ticks, square braces, or single or double quotes.</p>"},{"location":"settings/content-rules/#options_4","title":"Options","text":"Name Description List Items Default Value <code>No Bare URIs</code> Attempts to enclose bare URIs with angle brackets except when enclosed in back ticks, square braces, or single or double quotes. N/A false"},{"location":"settings/content-rules/#examples_5","title":"Examples","text":"Make sure that links are inside of angle brackets when not in single quotes('), double quotes(\"), or backticks(`)  Before:  <pre><code>https://github.com\nbraces around url should stay the same: [https://github.com]\nbackticks around url should stay the same: `https://github.com`\nLinks mid-sentence should be updated like https://google.com will be.\n'https://github.com'\n\"https://github.com\"\n&lt;https://github.com&gt;\nlinks should stay the same: [](https://github.com)\nhttps://gitlab.com\n</code></pre>  After:  <pre><code>&lt;https://github.com&gt;\nbraces around url should stay the same: [https://github.com]\nbackticks around url should stay the same: `https://github.com`\nLinks mid-sentence should be updated like &lt;https://google.com&gt; will be.\n'https://github.com'\n\"https://github.com\"\n&lt;https://github.com&gt;\nlinks should stay the same: [](https://github.com)\n&lt;https://gitlab.com&gt;\n</code></pre> Angle brackets are added if the url is not the only text in the single quotes(') or double quotes(\")  Before:  <pre><code>[https://github.com some text here]\nbackticks around a url should stay the same: `https://github.com some text here`\nsingle quotes around a url should stay the same, but only if the contents of the single quotes is the url: 'https://github.com some text here'\ndouble quotes around a url should stay the same, but only if the contents of the double quotes is the url: \"https://github.com some text here\"\n</code></pre>  After:  <pre><code>[&lt;https://github.com&gt; some text here]\nbackticks around a url should stay the same: `https://github.com some text here`\nsingle quotes around a url should stay the same, but only if the contents of the single quotes is the url: '&lt;https://github.com&gt; some text here'\ndouble quotes around a url should stay the same, but only if the contents of the double quotes is the url: \"&lt;https://github.com&gt; some text here\"\n</code></pre> Multiple angle brackets at the start and or end of a url will be reduced down to 1  Before:  <pre><code>&lt;&lt;https://github.com&gt;\n&lt;https://google.com&gt;&gt;\n&lt;&lt;https://gitlab.com&gt;&gt;\n</code></pre>  After:  <pre><code>&lt;https://github.com&gt;\n&lt;https://google.com&gt;\n&lt;https://gitlab.com&gt;\n</code></pre> Puts angle brackets around URIs when `No Bare URIs` is enabled  Before:  <pre><code>obsidian://show-plugin?id=cycle-in-sidebar\n</code></pre>  After:  <pre><code>&lt;obsidian://show-plugin?id=cycle-in-sidebar&gt;\n</code></pre>"},{"location":"settings/content-rules/#ordered-list-style","title":"Ordered List Style","text":"<p>Alias: <code>ordered-list-style</code></p> <p>Makes sure that ordered lists follow the style specified. Note: that 2 spaces or 1 tab is considered to be an indentation level.</p>"},{"location":"settings/content-rules/#options_5","title":"Options","text":"Name Description List Items Default Value <code>Number Style</code> The number style used in ordered list indicators <code>ascending</code>: Makes sure ordered list items are ascending (i.e. 1, 2, 3, etc.)<code>lazy</code>: Makes sure ordered list item indicators all are the same<code>preserve</code>: Preserves ordered list item indicators as they are <code>ascending</code> <code>Ordered List Indicator End Style</code> The ending character of an ordered list indicator <code>.</code>: Makes sure ordered list items indicators end in '.' (i.e <code>1.</code>)<code>)</code>: Makes sure ordered list item indicators end in ')' (i.e. <code>1)</code>) <code>.</code> <code>Preserve Starting Number</code> Whether to preserve the starting number of an ordered list. This can be used to have an ordered list that has content in between the ordered list items. N/A <code>undefined</code>"},{"location":"settings/content-rules/#examples_6","title":"Examples","text":"Ordered lists have list items set to ascending numerical order when Number Style is `ascending`.  Before:  <pre><code>1. Item 1\n2. Item 2\n4. Item 3\n\nSome text here\n\n1. Item 1\n1. Item 2\n1. Item 3\n</code></pre>  After:  <pre><code>1. Item 1\n2. Item 2\n3. Item 3\n\nSome text here\n\n1. Item 1\n2. Item 2\n3. Item 3\n</code></pre> Nested ordered lists have list items set to ascending numerical order when Number Style is `ascending`.  Before:  <pre><code>1. Item 1\n2. Item 2\n  1. Subitem 1\n  5. Subitem 2\n  2. Subitem 3\n4. Item 3\n</code></pre>  After:  <pre><code>1. Item 1\n2. Item 2\n  1. Subitem 1\n  2. Subitem 2\n  3. Subitem 3\n3. Item 3\n</code></pre> Ordered list in blockquote has list items set to '1.' when Number Style is `lazy`.  Before:  <pre><code>&gt; 1. Item 1\n&gt; 4. Item 2\n&gt; &gt; 1. Subitem 1\n&gt; &gt; 5. Subitem 2\n&gt; &gt; 2. Subitem 3\n</code></pre>  After:  <pre><code>&gt; 1. Item 1\n&gt; 1. Item 2\n&gt; &gt; 1. Subitem 1\n&gt; &gt; 1. Subitem 2\n&gt; &gt; 1. Subitem 3\n</code></pre> Ordered list in blockquote has list items set to ascending numerical order when Number Style is `ascending`.  Before:  <pre><code>&gt; 1. Item 1\n&gt; 4. Item 2\n&gt; &gt; 1. Subitem 1\n&gt; &gt; 5. Subitem 2\n&gt; &gt; 2. Subitem 3\n</code></pre>  After:  <pre><code>&gt; 1. Item 1\n&gt; 2. Item 2\n&gt; &gt; 1. Subitem 1\n&gt; &gt; 2. Subitem 2\n&gt; &gt; 3. Subitem 3\n</code></pre> Nested ordered list has list items set to '1)' when Number Style is `lazy` and Ordered List Indicator End Style is `)`.  Before:  <pre><code>1. Item 1\n2. Item 2\n  1. Subitem 1\n  5. Subitem 2\n  2. Subitem 3\n4. Item 3\n</code></pre>  After:  <pre><code>1) Item 1\n1) Item 2\n  1) Subitem 1\n  1) Subitem 2\n  1) Subitem 3\n1) Item 3\n</code></pre> Ordered lists have list items set to ascending numerical order using initial indicator number when Number Style is `ascending` and `preserveStart` is enabled  Before:  <pre><code>1. Item 1\n2. Item 2\n4. Item 3\n\nSome text here\n\n4. Item 4\n5. Item 5\n7. Item 6\n</code></pre>  After:  <pre><code>1. Item 1\n2. Item 2\n3. Item 3\n\nSome text here\n\n4. Item 4\n5. Item 5\n6. Item 6\n</code></pre> Nested ordered lists have list items set to ascending numerical order using initial indicator number when Number Style is `ascending` and `preserveStart` is enabled  Before:  <pre><code>4. Item 4\n2. Item 5\n  2. Subitem 2\n  5. Subitem 3\n  2. Subitem 4\n4. Item 6\n</code></pre>  After:  <pre><code>4. Item 4\n5. Item 5\n  2. Subitem 2\n  3. Subitem 3\n  4. Subitem 4\n6. Item 6\n</code></pre> Ordered lists have list items set to initial indicator number when Number Style is `lazy` and `preserveStart` is enabled  Before:  <pre><code>2. Item 2\n5. Item 3\n4. Item 4\n</code></pre>  After:  <pre><code>2. Item 2\n2. Item 3\n2. Item 4\n</code></pre> Nested ordered lists have list items set to initial indicator number when Number Style is `lazy` and `preserveStart` is enabled  Before:  <pre><code>4. Item 4\n2. Item 5\n  2. Subitem 2\n  5. Subitem 3\n  2. Subitem 4\n4. Item 6\n</code></pre>  After:  <pre><code>4. Item 4\n4. Item 5\n  2. Subitem 2\n  2. Subitem 3\n  2. Subitem 4\n4. Item 6\n</code></pre> Ordered lists items are not modified when Number Style is `preserve`  Before:  <pre><code>4. Item 4\n2. Item 5\n  2. Subitem 2\n  5. Subitem 3\n  2. Subitem 4\n4. Item 6\n</code></pre>  After:  <pre><code>4. Item 4\n2. Item 5\n  2. Subitem 2\n  5. Subitem 3\n  2. Subitem 4\n4. Item 6\n</code></pre>"},{"location":"settings/content-rules/#proper-ellipsis","title":"Proper Ellipsis","text":"<p>Alias: <code>proper-ellipsis</code></p> <p>Replaces three consecutive dots with an ellipsis.</p>"},{"location":"settings/content-rules/#examples_7","title":"Examples","text":"Replacing three consecutive dots with an ellipsis.  Before:  <pre><code>Lorem (...) Impsum.\n</code></pre>  After:  <pre><code>Lorem (\u2026) Impsum.\n</code></pre>"},{"location":"settings/content-rules/#quote-style","title":"Quote Style","text":"<p>Alias: <code>quote-style</code></p> <p>Updates the quotes in the body content to be updated to the specified single and double quote styles.</p>"},{"location":"settings/content-rules/#options_6","title":"Options","text":"Name Description List Items Default Value <code>Enable &lt;code&gt;Single Quote Style&lt;/code&gt;</code> Specifies that the selected single quote style should be used. N/A <code>true</code> <code>Single Quote Style</code> The style of single quotes to use. <code>''</code>: Uses \"'\" instead of smart single quotes<code>\u2018\u2019</code>: Uses \"\u2018\" and \"\u2019\" instead of straight single quotes <code>''</code> <code>Enable &lt;code&gt;Double Quote Style&lt;/code&gt;</code> Specifies that the selected double quote style should be used. N/A <code>true</code> <code>Double Quote Style</code> The style of double quotes to use. <code>\"\"</code>: Uses '\"' instead of smart double quotes<code>\u201c\u201d</code>: Uses '\u201c' and '\u201d' instead of straight double quotes <code>\"\"</code>"},{"location":"settings/content-rules/#examples_8","title":"Examples","text":"Smart quotes used in file are converted to straight quotes when styles are set to `Straight`  Before:  <pre><code># Double Quote Cases\n\u201cThere are a bunch of different kinds of smart quote indicators\u201d\n\u201eMore than you would think\u201d\n\u00abIncluding this one for Spanish\u00bb\n# Single Quote Cases\n\u2018Simple smart quotes get replaced\u2019\n\u201aAnother single style smart quote also gets replaced\u2019\n\u2039Even this style of single smart quotes is replaced\u203a\n</code></pre>  After:  <pre><code># Double Quote Cases\n\"There are a bunch of different kinds of smart quote indicators\"\n\"More than you would think\"\n\"Including this one for Spanish\"\n# Single Quote Cases\n'Simple smart quotes get replaced'\n'Another single style smart quote also gets replaced'\n'Even this style of single smart quotes is replaced'\n</code></pre> Straight quotes used in file are converted to smart quotes when styles are set to `Smart`  Before:  <pre><code>\"As you can see, these double quotes will be converted to smart quotes\"\n\"Common contractions are handled as well. For example can't is updated to smart quotes.\"\n\"Nesting a quote in a quote like so: 'here I am' is handled correctly\"\n'Single quotes by themselves are handled correctly'\nPossessives are handled correctly: Pam's dog is really cool!\nTemplater commands are ignored: &lt;% tp.date.now(\"YYYY-MM-DD\", 7) %&gt;\n\nBe careful as converting straight quotes to smart quotes requires you to have an even amount of quotes\nonce possessives and common contractions have been dealt with. If not, it will throw an error.\n</code></pre>  After:  <pre><code>\u201cAs you can see, these double quotes will be converted to smart quotes\u201d\n\u201cCommon contractions are handled as well. For example can\u2019t is updated to smart quotes.\u201d\n\u201cNesting a quote in a quote like so: \u2018here I am\u2019 is handled correctly\u201d\n\u2018Single quotes by themselves are handled correctly\u2019\nPossessives are handled correctly: Pam\u2019s dog is really cool!\nTemplater commands are ignored: &lt;% tp.date.now(\"YYYY-MM-DD\", 7) %&gt;\n\nBe careful as converting straight quotes to smart quotes requires you to have an even amount of quotes\nonce possessives and common contractions have been dealt with. If not, it will throw an error.\n</code></pre>"},{"location":"settings/content-rules/#remove-consecutive-list-markers","title":"Remove Consecutive List Markers","text":"<p>Alias: <code>remove-consecutive-list-markers</code></p> <p>Removes consecutive list markers. Useful when copy-pasting list items.</p>"},{"location":"settings/content-rules/#examples_9","title":"Examples","text":"Removing consecutive list markers.  Before:  <pre><code>- item 1\n- - copypasted item A\n- item 2\n  - indented item\n  - - copypasted item B\n</code></pre>  After:  <pre><code>- item 1\n- copypasted item A\n- item 2\n  - indented item\n  - copypasted item B\n</code></pre>"},{"location":"settings/content-rules/#remove-empty-list-markers","title":"Remove Empty List Markers","text":"<p>Alias: <code>remove-empty-list-markers</code></p> <p>Removes empty list markers, i.e. list items without content.</p>"},{"location":"settings/content-rules/#examples_10","title":"Examples","text":"Removes empty list markers.  Before:  <pre><code>- item 1\n-\n- item 2\n\n* list 2 item 1\n    *\n* list 2 item 2\n\n+ list 3 item 1\n+\n+ list 3 item 2\n</code></pre>  After:  <pre><code>- item 1\n- item 2\n\n* list 2 item 1\n* list 2 item 2\n\n+ list 3 item 1\n+ list 3 item 2\n</code></pre> Removes empty ordered list markers.  Before:  <pre><code>1. item 1\n2.\n3. item 2\n\n1. list 2 item 1\n2. list 2 item 2\n3. \n\n_Note that this rule does not make sure that the ordered list is sequential after removal_\n</code></pre>  After:  <pre><code>1. item 1\n3. item 2\n\n1. list 2 item 1\n2. list 2 item 2\n\n_Note that this rule does not make sure that the ordered list is sequential after removal_\n</code></pre> Removes empty checklist markers.  Before:  <pre><code>- [ ]  item 1\n- [x]\n- [ ] item 2\n- [ ]   \n\n_Note that this will affect checked and uncheck checked list items_\n</code></pre>  After:  <pre><code>- [ ]  item 1\n- [ ] item 2\n\n_Note that this will affect checked and uncheck checked list items_\n</code></pre> Removes empty list, checklist, and ordered list markers in callouts/blockquotes  Before:  <pre><code>&gt; Checklist in blockquote\n&gt; - [ ]  item 1\n&gt; - [x]\n&gt; - [ ] item 2\n&gt; - [ ]   \n\n&gt; Ordered List in blockquote\n&gt; &gt; 1. item 1\n&gt; &gt; 2.\n&gt; &gt; 3. item 2\n&gt; &gt; 4.  \n\n&gt; Regular lists in blockquote\n&gt;\n&gt; - item 1\n&gt; -\n&gt; - item 2\n&gt;\n&gt; List 2\n&gt;\n&gt; * item 1\n&gt;     *\n&gt; * list 2 item 2\n&gt;\n&gt; List 3\n&gt;\n&gt; + item 1\n&gt; + \n&gt; + item 2\n</code></pre>  After:  <pre><code>&gt; Checklist in blockquote\n&gt; - [ ]  item 1\n&gt; - [ ] item 2\n\n&gt; Ordered List in blockquote\n&gt; &gt; 1. item 1\n&gt; &gt; 3. item 2\n\n&gt; Regular lists in blockquote\n&gt;\n&gt; - item 1\n&gt; - item 2\n&gt;\n&gt; List 2\n&gt;\n&gt; * item 1\n&gt; * list 2 item 2\n&gt;\n&gt; List 3\n&gt;\n&gt; + item 1\n&gt; + item 2\n</code></pre>"},{"location":"settings/content-rules/#remove-hyphenated-line-breaks","title":"Remove Hyphenated Line Breaks","text":"<p>Alias: <code>remove-hyphenated-line-breaks</code></p> <p>Removes hyphenated line breaks. Useful when pasting text from textbooks.</p>"},{"location":"settings/content-rules/#examples_11","title":"Examples","text":"Removing hyphenated line breaks.  Before:  <pre><code>This text has a linebr\u2010 eak.\n</code></pre>  After:  <pre><code>This text has a linebreak.\n</code></pre>"},{"location":"settings/content-rules/#remove-multiple-spaces","title":"Remove Multiple Spaces","text":"<p>Alias: <code>remove-multiple-spaces</code></p> <p>Removes two or more consecutive spaces. Ignores spaces at the beginning and ending of the line. </p>"},{"location":"settings/content-rules/#examples_12","title":"Examples","text":"Removing double and triple space.  Before:  <pre><code>Lorem ipsum   dolor  sit amet.\n</code></pre>  After:  <pre><code>Lorem ipsum dolor sit amet.\n</code></pre>"},{"location":"settings/content-rules/#strong-style","title":"Strong Style","text":"<p>Alias: <code>strong-style</code></p> <p>Makes sure the strong style is consistent.</p>"},{"location":"settings/content-rules/#options_7","title":"Options","text":"Name Description List Items Default Value <code>Style</code> The style used to denote strong/bolded content <code>consistent</code>: Makes sure the first instance of strong is the style that will be used throughout the document<code>asterisk</code>: Makes sure ** is the strong indicator<code>underscore</code>: Makes sure __ is the strong indicator <code>consistent</code>"},{"location":"settings/content-rules/#examples_13","title":"Examples","text":"Strong indicators should use underscores when style is set to 'underscore'  Before:  <pre><code># Strong/Bold Cases\n\n**Test bold**\n** Test not bold **\nThis is **bold** mid sentence\nThis is **bold** mid sentence with a second **bold** on the same line\nThis is ***bold and emphasized***\nThis is ***nested bold** and ending emphasized*\nThis is ***nested emphasis* and ending bold**\n\n*Test emphasis*\n\n* List Item1 with **bold text**\n* List Item2\n</code></pre>  After:  <pre><code># Strong/Bold Cases\n\n__Test bold__\n** Test not bold **\nThis is __bold__ mid sentence\nThis is __bold__ mid sentence with a second __bold__ on the same line\nThis is *__bold and emphasized__*\nThis is *__nested bold__ and ending emphasized*\nThis is __*nested emphasis* and ending bold__\n\n*Test emphasis*\n\n* List Item1 with __bold text__\n* List Item2\n</code></pre> Strong indicators should use asterisks when style is set to 'asterisk'  Before:  <pre><code># Strong/Bold Cases\n\n__Test bold__\n__ Test not bold __\nThis is __bold__ mid sentence\nThis is __bold__ mid sentence with a second __bold__ on the same line\nThis is ___bold and emphasized___\nThis is ___nested bold__ and ending emphasized_\nThis is ___nested emphasis_ and ending bold__\n\n_Test emphasis_\n</code></pre>  After:  <pre><code># Strong/Bold Cases\n\n**Test bold**\n__ Test not bold __\nThis is **bold** mid sentence\nThis is **bold** mid sentence with a second **bold** on the same line\nThis is _**bold and emphasized**_\nThis is _**nested bold** and ending emphasized_\nThis is **_nested emphasis_ and ending bold**\n\n_Test emphasis_\n</code></pre> Strong indicators should use consistent style based on first strong indicator in a file when style is set to 'consistent'  Before:  <pre><code># Strong First Strong Is an Asterisk\n\n**First bold**\nThis is __bold__ mid sentence\nThis is __bold__ mid sentence with a second **bold** on the same line\nThis is ___bold and emphasized___\nThis is *__nested bold__ and ending emphasized*\nThis is **_nested emphasis_ and ending bold**\n\n__Test bold__\n</code></pre>  After:  <pre><code># Strong First Strong Is an Asterisk\n\n**First bold**\nThis is **bold** mid sentence\nThis is **bold** mid sentence with a second **bold** on the same line\nThis is _**bold and emphasized**_\nThis is ***nested bold** and ending emphasized*\nThis is **_nested emphasis_ and ending bold**\n\n**Test bold**\n</code></pre> Strong indicators should use consistent style based on first strong indicator in a file when style is set to 'consistent'  Before:  <pre><code># Strong First Strong Is an Underscore\n\n__First bold__\nThis is **bold** mid sentence\nThis is **bold** mid sentence with a second __bold__ on the same line\nThis is **_bold and emphasized_**\nThis is ***nested bold** and ending emphasized*\nThis is ___nested emphasis_ and ending bold__\n\n**Test bold**\n</code></pre>  After:  <pre><code># Strong First Strong Is an Underscore\n\n__First bold__\nThis is __bold__ mid sentence\nThis is __bold__ mid sentence with a second __bold__ on the same line\nThis is ___bold and emphasized___\nThis is *__nested bold__ and ending emphasized*\nThis is ___nested emphasis_ and ending bold__\n\n__Test bold__\n</code></pre>"},{"location":"settings/content-rules/#line-break-between-lines-with-content","title":"Line Break Between Lines with Content","text":"<p>Alias: <code>two-spaces-between-lines-with-content</code></p> <p>Makes sure that the specified line break is added to the ends of lines with content continued on the next line for paragraphs, blockquotes, and list items</p>"},{"location":"settings/content-rules/#options_8","title":"Options","text":"Name Description List Items Default Value <code>Line Break Indicator</code> The line break indicator to use. <code></code>:   <code>&lt;br/&gt;</code>: <code>&lt;br&gt;</code>: <code>\\</code>: \\ <code></code>"},{"location":"settings/content-rules/#additional-info_1","title":"Additional Info","text":"<p>Warning</p> <p>Do not use with paragraph blank lines. They work differently and will result in unexpected results.</p>"},{"location":"settings/content-rules/#examples_14","title":"Examples","text":"Make sure two spaces are added to the ends of lines that have content on it and the next line for lists, blockquotes, and paragraphs when the line break indicator is `  `  Before:  <pre><code># Heading 1\nFirst paragraph stays as the first paragraph\n\n- list item 1\n- list item 2\nContinuation of list item 2\n- list item 3\n\n1. Item 1\n2. Item 2\nContinuation of item 3\n3. Item 3\n\nParagraph for with link [[other file name]].\nContinuation *of* the paragraph has `inline code block` __in it__.\nEven more continuation\n\nParagraph lines that end in &lt;br/&gt;\nOr lines that end in &lt;br&gt;\nAre left swapped\nSince they mean the same thing\n\n``` text\nCode blocks are ignored\nEven with multiple lines\n```\nAnother paragraph here\n\n&gt; Blockquotes are affected\n&gt; More content here\nContent here\n\n&lt;div&gt;\nhtml content\nshould be ignored\n&lt;/div&gt;\nEven more content here\n</code></pre>  After:  <pre><code># Heading 1\nFirst paragraph stays as the first paragraph\n\n- list item 1\n- list item 2  \nContinuation of list item 2\n- list item 3\n\n1. Item 1\n2. Item 2  \nContinuation of item 3\n3. Item 3\n\nParagraph for with link [[other file name]].  \nContinuation *of* the paragraph has `inline code block` __in it__.  \nEven more continuation\n\nParagraph lines that end in  \nOr lines that end in  \nAre left swapped  \nSince they mean the same thing\n\n``` text\nCode blocks are ignored\nEven with multiple lines\n```\nAnother paragraph here\n\n&gt; Blockquotes are affected  \n&gt; More content here  \nContent here\n\n&lt;div&gt;\nhtml content\nshould be ignored\n&lt;/div&gt;\nEven more content here\n</code></pre>"},{"location":"settings/content-rules/#unordered-list-style","title":"Unordered List Style","text":"<p>Alias: <code>unordered-list-style</code></p> <p>Makes sure that unordered lists follow the style specified.</p>"},{"location":"settings/content-rules/#options_9","title":"Options","text":"Name Description List Items Default Value <code>List item style</code> The list item style to use in unordered lists <code>consistent</code>: Makes sure unordered list items use a consistent list item indicator in the file which will be based on the first list item found<code>-</code>: Makes sure unordered list items use <code>-</code> as their indicator<code>*</code>: Makes sure unordered list items use <code>*</code> as their indicator<code>+</code>: Makes sure unordered list items use <code>+</code> as their indicator <code>consistent</code>"},{"location":"settings/content-rules/#examples_15","title":"Examples","text":"Unordered lists have their indicator updated to `*` when `List item style = 'consistent'` and `*` is the first unordered list indicator  Before:  <pre><code>1. ordered item 1\n2. ordered item 2\n\nChecklists should be ignored\n- [ ] Checklist item 1\n- [x] completed item\n\n* Item 1\n  - Sublist 1 item 1\n  - Sublist 1 item 2\n- Item 2\n  + Sublist 2 item 1\n  + Sublist 2 item 2\n+ Item 3\n  * Sublist 3 item 1\n  * Sublist 3 item 2\n</code></pre>  After:  <pre><code>1. ordered item 1\n2. ordered item 2\n\nChecklists should be ignored\n- [ ] Checklist item 1\n- [x] completed item\n\n* Item 1\n  * Sublist 1 item 1\n  * Sublist 1 item 2\n* Item 2\n  * Sublist 2 item 1\n  * Sublist 2 item 2\n* Item 3\n  * Sublist 3 item 1\n  * Sublist 3 item 2\n</code></pre> Unordered lists have their indicator updated to `-` when `List item style = '-'`  Before:  <pre><code>- Item 1\n  * Sublist 1 item 1\n  * Sublist 1 item 2\n* Item 2\n  + Sublist 2 item 1\n  + Sublist 2 item 2\n+ Item 3\n  - Sublist 3 item 1\n  - Sublist 3 item 2\n\nSee that the ordered list is ignored, but its sublist is not\n\n1. Item 1\n  - Sub item 1\n1. Item 2\n  * Sub item 2\n1. Item 3\n  + Sub item 3\n</code></pre>  After:  <pre><code>- Item 1\n  - Sublist 1 item 1\n  - Sublist 1 item 2\n- Item 2\n  - Sublist 2 item 1\n  - Sublist 2 item 2\n- Item 3\n  - Sublist 3 item 1\n  - Sublist 3 item 2\n\nSee that the ordered list is ignored, but its sublist is not\n\n1. Item 1\n  - Sub item 1\n1. Item 2\n  - Sub item 2\n1. Item 3\n  - Sub item 3\n</code></pre> Unordered lists have their indicator updated to `*` when `List item style = '*'`  Before:  <pre><code>- Item 1\n  * Sublist 1 item 1\n  * Sublist 1 item 2\n* Item 2\n  + Sublist 2 item 1\n  + Sublist 2 item 2\n+ Item 3\n  - Sublist 3 item 1\n  - Sublist 3 item 2\n</code></pre>  After:  <pre><code>* Item 1\n  * Sublist 1 item 1\n  * Sublist 1 item 2\n* Item 2\n  * Sublist 2 item 1\n  * Sublist 2 item 2\n* Item 3\n  * Sublist 3 item 1\n  * Sublist 3 item 2\n</code></pre> Unordered list in blockquote has list item indicators set to `+` when `List item style = '-'`  Before:  <pre><code>&gt; - Item 1\n&gt; + Item 2\n&gt; &gt; * Subitem 1\n&gt; &gt; + Subitem 2\n&gt; &gt;   - Sub sub item 1\n&gt; &gt; - Subitem 3\n</code></pre>  After:  <pre><code>&gt; + Item 1\n&gt; + Item 2\n&gt; &gt; + Subitem 1\n&gt; &gt; + Subitem 2\n&gt; &gt;   + Sub sub item 1\n&gt; &gt; + Subitem 3\n</code></pre>"},{"location":"settings/custom-rules/","title":"Custom Rules","text":""},{"location":"settings/custom-rules/#custom-lint-commands","title":"Custom Lint Commands","text":"<p>These are special lint rules that the user may specify. They are Obsidian commands. If you would like to create a custom command that you can run, you can use the QuickAdd plugin in order to add a JavaScript script to make modifications to a file. This will require some level of knowledge about the Obsidian API and JavaScript. To use a custom user script, you will want to follow these steps:</p> <ol> <li>Install the QuickAdd plugin</li> <li>Go ahead and go to the settings for QuickAdd and select \"Manage Macros\"</li> <li>You should see a modal popup. In that modal, make sure to type in a macro name and add the macro.</li> <li>Once the macro is added, go ahead and configure the macro making sure to add your user user script (this should be a JavaScript file in your Obsidian vault). Here is an example from the QuickAdd repo with an explanation of what the code does.</li> <li>Once you have finished all changes to your macro that you would like, go ahead and exit out of configure macro modal and the macro manager modal.</li> <li>Then go ahead and select macro for the choice type and type in the name of the macro you just created (you may get suggestions or you may have to remember the name and type it in completely). Then add select \"Add Choice\".</li> <li>Once the choice has been added, go ahead and click the lightning bolt icon which is the option to add a command for a choice.</li> <li>Now you just need to search up this newly created command in the custom command settings for Obsidian Linter.</li> </ol> <p>Now the next time you run the Linter, the custom lint commands should run.</p>"},{"location":"settings/custom-rules/#custom-regex-replacements","title":"Custom Regex Replacements","text":"<p>These are rules that run before the YAML timestamp rule, but after most of the other rules. These rules allow you to specify the regex to find, the flags to use with that regex, and the value to replace it with. You may specify whitespace as the find and replace values, but please be careful as this can make a lot of unwanted changes if you are not careful. These rules can be useful in swapping out certain tags, words, and formatting for others if you know what you are doing in regex.</p> <p>Here is an online playground that you can test out regex at. It can let you know when regex is slow and you can use it to test if the text you want to replace is actually being selected by the find and flags portion of the regex.</p> <p>Here is an explanation on what each flag means. Feel free to use them as needed. The default ones added are <code>g</code> (global) and <code>m</code> (multiline).</p> <p>Regex lookbehinds can break Linter functionality</p> <p>Regex lookbehinds do not work on iOS mobile and using them will cause linting to fail. So please DO NOT use them for iOS mobile.</p>"},{"location":"settings/debug-settings/","title":"Debug Settings","text":"<p>The debug settings are designed to help the user get their settings and do some debugging on their own. It can also help developers determine the cause of an issue as well.</p>"},{"location":"settings/debug-settings/#log-level","title":"Log Level","text":"<p>This is the type of logs to actually keep track of. Here are the different levels along with what types of logs they pertain to:</p> Level Types of Logs silent No error logs are logged,but notices will be displayed error Error logs that prevent the Linter from functioning warn Warnings about potential issues that might just be nothing, but could be a problem info Logs that let you know that high level things happened like the plugin loaded, unloaded, set the moment locale to a specific value, etc. debug Logs that help when debugging the Linter in order to figure out what is going on in the Linter trace Logs that help figure out what areas of code were hit <p>Level Recommendation</p> <p>Use either error or warn for your log level unless you are looking into a bug or looking for info to include on a bug report.</p>"},{"location":"settings/debug-settings/#linter-config","title":"Linter Config","text":"<p>This the Linter's settings. It makes the values in the <code>data.json</code> easier to access. This value should ve provided on all bug reports.</p>"},{"location":"settings/debug-settings/#collecting-logs-in-the-linter","title":"Collecting Logs in the Linter","text":"<p>If you encounter an error or are hitting some kind of performance issue and would like to help determine what th problem is, you can collect logs when linting a single file on save or single file lint.</p> <p>Logs Present</p> <p>The log that are kept track of are based on the value of Log Level.</p> <p>Log Reporting</p> <p>The logs that will be stored are entirely local. They are not sent anywhere and have to be copied by a user to a bug report in order for those working on the Linter to know.</p>"},{"location":"settings/footnote-rules/","title":"Footnote Rules","text":""},{"location":"settings/footnote-rules/#footnote-rules","title":"Footnote Rules","text":""},{"location":"settings/footnote-rules/#footnote-after-punctuation","title":"Footnote after Punctuation","text":"<p>Alias: <code>footnote-after-punctuation</code></p> <p>Ensures that footnote references are placed after punctuation, not before.</p>"},{"location":"settings/footnote-rules/#examples","title":"Examples","text":"Placing footnotes after punctuation.  Before:  <pre><code>Lorem[^1]. Ipsum[^2], doletes.\n</code></pre>  After:  <pre><code>Lorem.[^1] Ipsum,[^2] doletes.\n</code></pre> A footnote at the start of a task is not moved to after the punctuation  Before:  <pre><code>- [ ] [^1]: This is a footnote and a task.\n- [ ] This is a footnote and a task that gets swapped with the punctuation[^2]!\n[^2]: This footnote got modified\n</code></pre>  After:  <pre><code>- [ ] [^1]: This is a footnote and a task.\n- [ ] This is a footnote and a task that gets swapped with the punctuation![^2]\n[^2]: This footnote got modified\n</code></pre>"},{"location":"settings/footnote-rules/#move-footnotes-to-the-bottom","title":"Move Footnotes to the bottom","text":"<p>Alias: <code>move-footnotes-to-the-bottom</code></p> <p>Move all footnotes to the bottom of the document and makes sure they are sorted based on the order they are referenced in the file's body.</p>"},{"location":"settings/footnote-rules/#examples_1","title":"Examples","text":"Moving footnotes to the bottom  Before:  <pre><code>Lorem ipsum, consectetur adipiscing elit. [^1] Donec dictum turpis quis ipsum pellentesque.\n\n[^1]: first footnote\n\nQuisque lorem est, fringilla sed enim at, sollicitudin lacinia nisi.[^2]\n[^2]: second footnote\n\nMaecenas malesuada dignissim purus ac volutpat.\n</code></pre>  After:  <pre><code>Lorem ipsum, consectetur adipiscing elit. [^1] Donec dictum turpis quis ipsum pellentesque.\n\nQuisque lorem est, fringilla sed enim at, sollicitudin lacinia nisi.[^2]\nMaecenas malesuada dignissim purus ac volutpat.\n\n[^1]: first footnote\n[^2]: second footnote\n</code></pre>"},{"location":"settings/footnote-rules/#re-index-footnotes","title":"Re-Index Footnotes","text":"<p>Alias: <code>re-index-footnotes</code></p> <p>Re-indexes footnote keys and footnote, based on the order of occurrence. Note: This rule does not work if there is more than one footnote for a key.</p>"},{"location":"settings/footnote-rules/#examples_2","title":"Examples","text":"Re-indexing footnotes after having deleted previous footnotes  Before:  <pre><code>Lorem ipsum at aliquet felis.[^3] Donec dictum turpis quis pellentesque,[^5] et iaculis tortor condimentum.\n\n[^3]: first footnote\n[^5]: second footnote\n</code></pre>  After:  <pre><code>Lorem ipsum at aliquet felis.[^1] Donec dictum turpis quis pellentesque,[^2] et iaculis tortor condimentum.\n\n[^1]: first footnote\n[^2]: second footnote\n</code></pre> Re-indexing footnotes after inserting a footnote between  Before:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.[^1] Aenean at aliquet felis. Donec dictum turpis quis ipsum pellentesque, et iaculis tortor condimentum.[^1a] Vestibulum nec blandit felis, vulputate finibus purus.[^2] Praesent quis iaculis diam.\n\n[^1]: first footnote\n[^1a]: third footnote, inserted later\n[^2]: second footnotes\n</code></pre>  After:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.[^1] Aenean at aliquet felis. Donec dictum turpis quis ipsum pellentesque, et iaculis tortor condimentum.[^2] Vestibulum nec blandit felis, vulputate finibus purus.[^3] Praesent quis iaculis diam.\n\n[^1]: first footnote\n[^2]: third footnote, inserted later\n[^3]: second footnotes\n</code></pre> Re-indexing footnotes preserves multiple references to the same footnote index  Before:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.[^1] Aenean at aliquet felis. Donec dictum turpis quis ipsum pellentesque, et iaculis tortor condimentum.[^1a] Vestibulum nec blandit felis, vulputate finibus purus.[^2] Praesent quis iaculis diam.[^1]\n\n[^1]: first footnote\n[^1a]: third footnote, inserted later\n[^2]: second footnotes\n</code></pre>  After:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.[^1] Aenean at aliquet felis. Donec dictum turpis quis ipsum pellentesque, et iaculis tortor condimentum.[^2] Vestibulum nec blandit felis, vulputate finibus purus.[^3] Praesent quis iaculis diam.[^1]\n\n[^1]: first footnote\n[^2]: third footnote, inserted later\n[^3]: second footnotes\n</code></pre> Re-indexing footnotes condense duplicate footnotes into 1 when key and footnote are the same  Before:  <pre><code>bla[^1], bla[^1], bla[^2]\n[^1]: bla\n[^1]: bla\n[^2]: bla\n</code></pre>  After:  <pre><code>bla[^1], bla[^1], bla[^2]\n[^1]: bla\n[^2]: bla\n</code></pre>"},{"location":"settings/general-settings/","title":"General Settings","text":""},{"location":"settings/general-settings/#default-escape-character","title":"Default Escape Character","text":"<p>The default character to use to escape YAML values when a single quote and double quote are not present.</p> List Item Description Is Default Value <code>\"</code> Use a double quote to escape if no single or double quote is present <code>true</code> <code>'</code> Use a single quote to escape if no single or double quote is present <code>false</code>"},{"location":"settings/general-settings/#yaml-aliases-section-style","title":"Yaml aliases section style","text":"<p>The style of the YAML aliases section</p> List Item Description Is Default Value <code>multi-line</code> <code>aliases:\\n  - Title</code> <code>false</code> <code>single-line</code> <code>aliases: [Title]</code> <code>true</code> <code>single string comma delimited</code> <code>aliases: Title, Other Title</code> <code>false</code> <code>single string to single-line</code> Aliases will be formatted as a string if there is 1 or fewer elements like so <code>aliases: Title</code>. If there is more than 1 element, it will be formatted like a single-line array. <code>false</code> <code>single string to multi-line</code> Aliases will be formatted as a string if there is 1 or fewer elements like so <code>aliases: Title</code>. If there is more than 1 element, it will be formatted like a multi-line array. <code>false</code>"},{"location":"settings/heading-rules/","title":"Heading Rules","text":""},{"location":"settings/heading-rules/#heading-rules","title":"Heading Rules","text":"<p>A heading for the purpose of the Linter is an ATX header. It does not currently support Setext headers (see this issue).</p>"},{"location":"settings/heading-rules/#capitalize-headings","title":"Capitalize Headings","text":"<p>Alias: <code>capitalize-headings</code></p> <p>Headings should be formatted with capitalization</p>"},{"location":"settings/heading-rules/#options","title":"Options","text":"Name Description List Items Default Value <code>Style</code> The style of capitalization to use <code>Title Case</code>: Capitalize Using Title Case Rules<code>ALL CAPS</code>: CAPITALIZE THE WHOLE TITLE<code>First letter</code>: Only capitalize the first letter <code>Title Case</code> <code>Ignore Cased Words</code> Only apply title case style to words that are all lowercase N/A <code>true</code> <code>Ignore Words</code> A comma separated list of words to ignore when capitalizing N/A <code>macOS, iOS, iPhone, iPad, JavaScript, TypeScript, AppleScript, I</code> <code>Lowercase Words</code> A comma separated list of words to keep lowercase N/A <code>a, an, the, aboard, about, abt., above, abreast, absent, across, after, against, along, aloft, alongside, amid, amidst, mid, midst, among, amongst, anti, apropos, around, round, as, aslant, astride, at, atop, ontop, bar, barring, before, B4, behind, below, beneath, neath, beside, besides, between, 'tween, beyond, but, by, chez, circa, c., ca., come, concerning, contra, counting, cum, despite, spite, down, during, effective, ere, except, excepting, excluding, failing, following, for, from, in, including, inside, into, less, like, minus, modulo, mod, near, nearer, nearest, next, notwithstanding, of, o', off, offshore, on, onto, opposite, out, outside, over, o'er, pace, past, pending, per, plus, post, pre, pro, qua, re, regarding, respecting, sans, save, saving, short, since, sub, than, through, thru, throughout, thruout, till, times, to, t', touching, toward, towards, under, underneath, unlike, until, unto, up, upon, versus, vs., v., via, vice, vis-\u00e0-vis, wanting, with, w/, w., c\u0304, within, w/i, without, 'thout, w/o, abroad, adrift, aft, afterward, afterwards, ahead, apart, ashore, aside, away, back, backward, backwards, beforehand, downhill, downstage, downstairs, downstream, downward, downwards, downwind, east, eastward, eastwards, forth, forward, forwards, heavenward, heavenwards, hence, henceforth, here, hereby, herein, hereof, hereto, herewith, home, homeward, homewards, indoors, inward, inwards, leftward, leftwards, north, northeast, northward, northwards, northwest, now, onward, onwards, outdoors, outward, outwards, overboard, overhead, overland, overseas, rightward, rightwards, seaward, seawards, skywards, skyward, south, southeast, southwards, southward, southwest, then, thence, thenceforth, there, thereby, therein, thereof, thereto, therewith, together, underfoot, underground, uphill, upstage, upstairs, upstream, upward, upwards, upwind, west, westward, westwards, when, whence, where, whereby, wherein, whereto, wherewith, although, because, considering, given, granted, if, lest, once, provided, providing, seeing, so, supposing, though, unless, whenever, whereas, wherever, while, whilst, ago, according to, as regards, counter to, instead of, owing to, pertaining to, at the behest of, at the expense of, at the hands of, at risk of, at the risk of, at variance with, by dint of, by means of, by virtue of, by way of, for the sake of, for sake of, for lack of, for want of, from want of, in accordance with, in addition to, in case of, in charge of, in compliance with, in conformity with, in contact with, in exchange for, in favor of, in front of, in lieu of, in light of, in the light of, in line with, in place of, in point of, in quest of, in relation to, in regard to, with regard to, in respect to, with respect to, in return for, in search of, in step with, in touch with, in terms of, in the name of, in view of, on account of, on behalf of, on grounds of, on the grounds of, on the part of, on top of, with a view to, with the exception of, \u00e0 la, a la, as soon as, as well as, close to, due to, far from, in case, other than, prior to, pursuant to, regardless of, subsequent to, as long as, as much as, as far as, by the time, in as much as, inasmuch, in order to, in order that, even, provide that, if only, whether, whose, whoever, why, how, or not, whatever, what, both, and, or, not only, but also, either, neither, nor, just, rather, no sooner, such, that, yet, is, it</code>"},{"location":"settings/heading-rules/#examples","title":"Examples","text":"With `Title Case=true`, `Ignore Cased Words=false`  Before:  <pre><code># this is a heading 1\n## THIS IS A HEADING 2\n### a heading 3\n</code></pre>  After:  <pre><code># This is a Heading 1\n## This is a Heading 2\n### A Heading 3\n</code></pre> With `Title Case=true`, `Ignore Cased Words=true`  Before:  <pre><code># this is a heading 1\n## THIS IS A HEADING 2\n### a hEaDiNg 3\n</code></pre>  After:  <pre><code># This is a Heading 1\n## THIS IS A HEADING 2\n### A hEaDiNg 3\n</code></pre> With `First letter=true`  Before:  <pre><code># this is a heading 1\n## this is a heading 2\n</code></pre>  After:  <pre><code># This is a heading 1\n## This is a heading 2\n</code></pre> With `ALL CAPS=true`  Before:  <pre><code># this is a heading 1\n## this is a heading 2\n</code></pre>  After:  <pre><code># THIS IS A HEADING 1\n## THIS IS A HEADING 2\n</code></pre>"},{"location":"settings/heading-rules/#file-name-heading","title":"File Name Heading","text":"<p>Alias: <code>file-name-heading</code></p> <p>Inserts the file name as a H1 heading if no H1 heading exists.</p>"},{"location":"settings/heading-rules/#examples_1","title":"Examples","text":"Inserts an H1 heading  Before:  <pre><code>This is a line of text\n</code></pre>  After:  <pre><code># File Name\nThis is a line of text\n</code></pre> Inserts heading after YAML front matter  Before:  <pre><code>---\ntitle: My Title\n---\nThis is a line of text\n</code></pre>  After:  <pre><code>---\ntitle: My Title\n---\n# File Name\nThis is a line of text\n</code></pre>"},{"location":"settings/heading-rules/#header-increment","title":"Header Increment","text":"<p>Alias: <code>header-increment</code></p> <p>Heading levels should only increment by one level at a time</p>"},{"location":"settings/heading-rules/#options_1","title":"Options","text":"Name Description List Items Default Value <code>Start Header Increment at Heading Level 2</code> Makes heading level 2 the minimum heading level in a file for header increment and shifts all headings accordingly so they increment starting with a level 2 heading. N/A false"},{"location":"settings/heading-rules/#examples_2","title":"Examples","text":"Heading levels are decremented as needed  Before:  <pre><code># H1\n### H3\n### H3\n#### H4\n###### H6\n\nWe skipped a 2nd level heading\n</code></pre>  After:  <pre><code># H1\n## H3\n## H3\n### H4\n#### H6\n\nWe skipped a 2nd level heading\n</code></pre> Skipped headings in sections that would be decremented will result in those headings not having the same meaning  Before:  <pre><code># H1\n### H3\n\nWe skip from 1 to 3\n\n###### H6\n\nWe skip from 3 to 6 leaving out 4, 5, and 6. Thus headings level 4 and 5 will be treated like H3 above until another H2 or H1 is encountered\n\n##### H5\n\nWe skipped 5 previously so it will be treated the same as the H3 above since it was the next lowest header that was to be decremented\n\n## H2\n\nThis resets the decrement section so the H6 below is decremented to an H3\n\n###### H6\n</code></pre>  After:  <pre><code># H1\n## H3\n\nWe skip from 1 to 3\n\n### H6\n\nWe skip from 3 to 6 leaving out 4, 5, and 6. Thus headings level 4 and 5 will be treated like H3 above until another H2 or H1 is encountered\n\n## H5\n\nWe skipped 5 previously so it will be treated the same as the H3 above since it was the next lowest header that was to be decremented\n\n# H2\n\nThis resets the decrement section so the H6 below is decremented to an H3\n\n## H6\n</code></pre> When `Start Header Increment at Heading Level 2 = true`, H1s become H2s and the other headers are incremented accordingly  Before:  <pre><code># H1 becomes H2\n#### H4 becomes H3\n###### H6\n## H2\n###### H6\n# H1\n## H2\n</code></pre>  After:  <pre><code>## H1 becomes H2\n### H4 becomes H3\n#### H6\n## H2\n### H6\n## H1\n### H2\n</code></pre>"},{"location":"settings/heading-rules/#headings-start-line","title":"Headings Start Line","text":"<p>Alias: <code>headings-start-line</code></p> <p>Headings that do not start a line will have their preceding whitespace removed to make sure they get recognized as headers.</p>"},{"location":"settings/heading-rules/#examples_3","title":"Examples","text":"Removes spaces prior to a heading  Before:  <pre><code>   ## Other heading preceded by 2 spaces ##\n_Note that if the spacing is enough for the header to be considered to be part of a codeblock it will not be affected by this rule._\n</code></pre>  After:  <pre><code>## Other heading preceded by 2 spaces ##\n_Note that if the spacing is enough for the header to be considered to be part of a codeblock it will not be affected by this rule._\n</code></pre> Tags are not affected by this  Before:  <pre><code>  #test\n  # Heading &amp;amp;\n</code></pre>  After:  <pre><code>  #test\n# Heading &amp;amp;\n</code></pre>"},{"location":"settings/heading-rules/#remove-trailing-punctuation-in-heading","title":"Remove Trailing Punctuation in Heading","text":"<p>Alias: <code>remove-trailing-punctuation-in-heading</code></p> <p>Removes the specified punctuation from the end of headings making sure to ignore the semicolon at the end of HTML entity references.</p>"},{"location":"settings/heading-rules/#options_2","title":"Options","text":"Name Description List Items Default Value <code>Trailing Punctuation</code> The trailing punctuation to remove from the headings in the file. N/A <code>.,;:!\u3002\uff0c\uff1b\uff1a\uff01</code>"},{"location":"settings/heading-rules/#examples_4","title":"Examples","text":"Removes punctuation from the end of a heading  Before:  <pre><code># Heading ends in a period.\n## Other heading ends in an exclamation mark! ##\n</code></pre>  After:  <pre><code># Heading ends in a period\n## Other heading ends in an exclamation mark ##\n</code></pre> HTML Entities at the end of a heading is ignored  Before:  <pre><code># Heading 1\n## Heading &amp;amp;\n</code></pre>  After:  <pre><code># Heading 1\n## Heading &amp;amp;\n</code></pre> Removes punctuation from the end of a heading when followed by whitespace  Before:  <pre><code># Heading 1!  \n## Heading 2.   \n</code></pre>  After:  <pre><code># Heading 1  \n## Heading 2    \n</code></pre>"},{"location":"settings/paste-rules/","title":"Paste Rules","text":""},{"location":"settings/paste-rules/#paste-rules","title":"Paste Rules","text":""},{"location":"settings/paste-rules/#limitations","title":"Limitations","text":"<ul> <li>The plugin only works with the standard pasting (<code>cmd/ctrl + v</code>) shortcut, and not with the <code>p</code> operator in vim. (Pasting with <code>cmd/ctrl + v</code> in normal or insert mode does work though.)</li> <li>To avoid conflicts with Plugins like Auto Link Title or Paste URL into Selection, will not be triggered when an URL is detected in the clipboard.</li> <li>On mobile, in order to paste the URL, ensure you perform the <code>Tap and Hold -&gt; Paste</code> action to paste into your document and use the paste rules.</li> <li>When doing a multicursor multiline paste, the cursors will stay where they were after pasting the values instead of moving to the end of the pasted value</li> </ul>"},{"location":"settings/paste-rules/#add-blockquote-indentation-on-paste","title":"Add Blockquote Indentation on Paste","text":"<p>Alias: <code>add-blockquote-indentation-on-paste</code></p> <p>Adds blockquotes to all but the first line, when the cursor is in a blockquote/callout line during pasting</p>"},{"location":"settings/paste-rules/#examples","title":"Examples","text":"Line being pasted into regular text does not get blockquotified with current line being `Part 1 of the sentence`  Before:  <pre><code>was much less likely to succeed, but they tried it anyway.\nPart 2 was much more interesting.\n</code></pre>  After:  <pre><code>was much less likely to succeed, but they tried it anyway.\nPart 2 was much more interesting.\n</code></pre> Line being pasted into a blockquote gets blockquotified with current line being `&gt; &gt; `  Before:  <pre><code>This content is being added to a blockquote\nNote that the second line is indented and the surrounding blank lines were trimmed\n</code></pre>  After:  <pre><code>This content is being added to a blockquote\n&gt; &gt; Note that the second line is indented and the surrounding blank lines were trimmed\n</code></pre>"},{"location":"settings/paste-rules/#prevent-double-checklist-indicator-on-paste","title":"Prevent Double Checklist Indicator on Paste","text":"<p>Alias: <code>prevent-double-checklist-indicator-on-paste</code></p> <p>Removes starting checklist indicator from the text to paste if the line the cursor is on in the file has a checklist indicator</p>"},{"location":"settings/paste-rules/#examples_1","title":"Examples","text":"Line being pasted is left alone when current line has no checklist indicator in it: `Regular text here`  Before:  <pre><code>- [ ] Checklist item being pasted\n</code></pre>  After:  <pre><code>- [ ] Checklist item being pasted\n</code></pre> Line being pasted into a blockquote without a checklist indicator is left alone when it lacks a checklist indicator: `&gt; &gt; `  Before:  <pre><code>- [ ] Checklist item contents here\nMore content here\n</code></pre>  After:  <pre><code>- [ ] Checklist item contents here\nMore content here\n</code></pre> Line being pasted into a blockquote with a checklist indicator has its checklist indicator removed when current line is: `&gt; - [x] `  Before:  <pre><code>- [ ] Checklist item contents here\nMore content here\n</code></pre>  After:  <pre><code>Checklist item contents here\nMore content here\n</code></pre> Line being pasted with a checklist indicator has its checklist indicator removed when current line is: `- [ ] `  Before:  <pre><code>- [x] Checklist item 1\n- [ ] Checklist item 2\n</code></pre>  After:  <pre><code>Checklist item 1\n- [ ] Checklist item 2\n</code></pre> Line being pasted as a checklist indicator has its checklist indicator removed when current line is: `- [!] `  Before:  <pre><code>- [x] Checklist item 1\n- [ ] Checklist item 2\n</code></pre>  After:  <pre><code>Checklist item 1\n- [ ] Checklist item 2\n</code></pre> When pasting a checklist and the selected text starts with a checklist, the text to paste should still start with a checklist  Before:  <pre><code>- [x] Checklist item 1\n- [ ] Checklist item 2\n</code></pre>  After:  <pre><code>- [x] Checklist item 1\n- [ ] Checklist item 2\n</code></pre>"},{"location":"settings/paste-rules/#prevent-double-list-item-indicator-on-paste","title":"Prevent Double List Item Indicator on Paste","text":"<p>Alias: <code>prevent-double-list-item-indicator-on-paste</code></p> <p>Removes starting list indicator from the text to paste if the line the cursor is on in the file has a list indicator</p>"},{"location":"settings/paste-rules/#examples_2","title":"Examples","text":"Line being pasted is left alone when current line has no list indicator in it: `Regular text here`  Before:  <pre><code>- List item being pasted\n</code></pre>  After:  <pre><code>- List item being pasted\n</code></pre> Line being pasted into a blockquote without a list indicator is left alone when it lacks a list indicator: `&gt; &gt; `  Before:  <pre><code>* List item contents here\nMore content here\n</code></pre>  After:  <pre><code>* List item contents here\nMore content here\n</code></pre> Line being pasted into a blockquote with a list indicator is has its list indicator removed when current line is: `&gt; * `  Before:  <pre><code>+ List item contents here\nMore content here\n</code></pre>  After:  <pre><code>List item contents here\nMore content here\n</code></pre> Line being pasted with a list indicator is has its list indicator removed when current line is: `+ `  Before:  <pre><code>- List item 1\n- List item 2\n</code></pre>  After:  <pre><code>List item 1\n- List item 2\n</code></pre> When pasting a list item and the selected text starts with a list item indicator, the text to paste should still start with a list item indicator  Before:  <pre><code>- List item 1\n- List item 2\n</code></pre>  After:  <pre><code>- List item 1\n- List item 2\n</code></pre>"},{"location":"settings/paste-rules/#proper-ellipsis-on-paste","title":"Proper Ellipsis on Paste","text":"<p>Alias: <code>proper-ellipsis-on-paste</code></p> <p>Replaces three consecutive dots with an ellipsis even if they have a space between them in the text to paste</p>"},{"location":"settings/paste-rules/#examples_3","title":"Examples","text":"Replacing three consecutive dots with an ellipsis even if spaces are present  Before:  <pre><code>Lorem (...) Impsum.\nLorem (. ..) Impsum.\nLorem (. . .) Impsum.\n</code></pre>  After:  <pre><code>Lorem (\u2026) Impsum.\nLorem (\u2026) Impsum.\nLorem (\u2026) Impsum.\n</code></pre>"},{"location":"settings/paste-rules/#remove-hyphens-on-paste","title":"Remove Hyphens on Paste","text":"<p>Alias: <code>remove-hyphens-on-paste</code></p> <p>Removes hyphens from the text to paste</p>"},{"location":"settings/paste-rules/#examples_4","title":"Examples","text":"Remove hyphen in content to paste  Before:  <pre><code>Text that was cool but hyper-\ntension made it uncool.\n</code></pre>  After:  <pre><code>Text that was cool but hypertension made it uncool.\n</code></pre>"},{"location":"settings/paste-rules/#remove-leading-or-trailing-whitespace-on-paste","title":"Remove Leading or Trailing Whitespace on Paste","text":"<p>Alias: <code>remove-leading-or-trailing-whitespace-on-paste</code></p> <p>Removes any leading non-tab whitespace and all trailing whitespace for the text to paste</p>"},{"location":"settings/paste-rules/#examples_5","title":"Examples","text":"Removes leading spaces and newline characters  Before:  <pre><code>         This text was really indented\n</code></pre>  After:  <pre><code>This text was really indented\n</code></pre> Leaves leading tabs alone  Before:  <pre><code>        This text is really indented\n</code></pre>  After:  <pre><code>        This text is really indented\n</code></pre>"},{"location":"settings/paste-rules/#remove-leftover-footnotes-from-quote-on-paste","title":"Remove Leftover Footnotes from Quote on Paste","text":"<p>Alias: <code>remove-leftover-footnotes-from-quote-on-paste</code></p> <p>Removes any leftover footnote references for the text to paste</p>"},{"location":"settings/paste-rules/#examples_6","title":"Examples","text":"Footnote reference removed  Before:  <pre><code>He was sure that he would get off without doing any time, but the cops had other plans.50\n\n_Note that the format for footnote references to remove is a dot or comma followed by any number of digits_\n</code></pre>  After:  <pre><code>He was sure that he would get off without doing any time, but the cops had other plans\n\n_Note that the format for footnote references to remove is a dot or comma followed by any number of digits_\n</code></pre> Footnote reference removal does not affect links  Before:  <pre><code>[[Half is .5]]\n[Half is .5](HalfIs.5.md)\n![](HalfIs.5.jpg)\n![[Half is .5.jpg]]\n</code></pre>  After:  <pre><code>[[Half is .5]]\n[Half is .5](HalfIs.5.md)\n![](HalfIs.5.jpg)\n![[Half is .5.jpg]]\n</code></pre>"},{"location":"settings/paste-rules/#remove-multiple-blank-lines-on-paste","title":"Remove Multiple Blank Lines on Paste","text":"<p>Alias: <code>remove-multiple-blank-lines-on-paste</code></p> <p>Condenses multiple blank lines down into one blank line for the text to paste</p>"},{"location":"settings/paste-rules/#examples_7","title":"Examples","text":"Multiple blanks lines condensed down to one  Before:  <pre><code>Here is the first line.\n\n\n\n\nHere is some more text.\n</code></pre>  After:  <pre><code>Here is the first line.\n\nHere is some more text.\n</code></pre> Text with only one blank line in a row is left alone  Before:  <pre><code>First line.\n\nLast line.\n</code></pre>  After:  <pre><code>First line.\n\nLast line.\n</code></pre>"},{"location":"settings/spacing-rules/","title":"Spacing Rules","text":""},{"location":"settings/spacing-rules/#spacing-rules","title":"Spacing Rules","text":""},{"location":"settings/spacing-rules/#compact-yaml","title":"Compact YAML","text":"<p>Alias: <code>compact-yaml</code></p> <p>Removes leading and trailing blank lines in the YAML front matter.</p>"},{"location":"settings/spacing-rules/#options","title":"Options","text":"Name Description List Items Default Value <code>Inner New Lines</code> Remove new lines that are not at the start or the end of the YAML N/A false"},{"location":"settings/spacing-rules/#examples","title":"Examples","text":"Remove blank lines at the start and end of the YAML  Before:  <pre><code>---\n\ndate: today\n\ntitle: unchanged without inner new lines turned on\n\n---\n</code></pre>  After:  <pre><code>---\ndate: today\n\ntitle: unchanged without inner new lines turned on\n---\n</code></pre> Remove blank lines anywhere in YAML with inner new lines set to true  Before:  <pre><code>---\n\ndate: today\n\n\ntitle: remove inner new lines\n\n---\n\n# Header 1\n\n\nBody content here.\n</code></pre>  After:  <pre><code>---\ndate: today\ntitle: remove inner new lines\n---\n\n# Header 1\n\n\nBody content here.\n</code></pre>"},{"location":"settings/spacing-rules/#consecutive-blank-lines","title":"Consecutive blank lines","text":"<p>Alias: <code>consecutive-blank-lines</code></p> <p>There should be at most one consecutive blank line.</p>"},{"location":"settings/spacing-rules/#examples_1","title":"Examples","text":"Consecutive blank lines are removed  Before:  <pre><code>Some text\n\n\nSome more text\n</code></pre>  After:  <pre><code>Some text\n\nSome more text\n</code></pre>"},{"location":"settings/spacing-rules/#convert-spaces-to-tabs","title":"Convert Spaces to Tabs","text":"<p>Alias: <code>convert-spaces-to-tabs</code></p> <p>Converts leading spaces to tabs.</p>"},{"location":"settings/spacing-rules/#options_1","title":"Options","text":"Name Description List Items Default Value <code>Tabsize</code> Number of spaces that will be converted to a tab N/A <code>4</code>"},{"location":"settings/spacing-rules/#examples_2","title":"Examples","text":"Converting spaces to tabs with `tabsize = 3`  Before:  <pre><code>- text with no indention\n   - text indented with 3 spaces\n- text with no indention\n      - text indented with 6 spaces\n</code></pre>  After:  <pre><code>- text with no indention\n    - text indented with 3 spaces\n- text with no indention\n        - text indented with 6 spaces\n</code></pre> Converting spaces to tabs with `tabsize = 3` works in blockquotes  Before:  <pre><code>&gt; - text with no indention\n&gt;    - text indented with 3 spaces\n&gt; - text with no indention\n&gt;       - text indented with 6 spaces\n</code></pre>  After:  <pre><code>&gt; - text with no indention\n&gt;   - text indented with 3 spaces\n&gt; - text with no indention\n&gt;       - text indented with 6 spaces\n</code></pre>"},{"location":"settings/spacing-rules/#empty-line-around-blockquotes","title":"Empty Line Around Blockquotes","text":"<p>Alias: <code>empty-line-around-blockquotes</code></p> <p>Ensures that there is an empty line around blockquotes unless they start or end a document. Note: an empty line is either one less level of nesting for blockquotes or a newline character.</p>"},{"location":"settings/spacing-rules/#examples_3","title":"Examples","text":"Blockquotes that start a document do not get an empty line before them.  Before:  <pre><code>&gt; Quote content here\n&gt; quote content continued\n# Title here\n</code></pre>  After:  <pre><code>&gt; Quote content here\n&gt; quote content continued\n\n# Title here\n</code></pre> Blockquotes that end a document do not get an empty line after them.  Before:  <pre><code># Heading 1\n&gt; Quote content here\n&gt; quote content continued\n</code></pre>  After:  <pre><code># Heading 1\n\n&gt; Quote content here\n&gt; quote content continued\n</code></pre> Blockquotes that are nested have the proper empty line added  Before:  <pre><code># Make sure that nested blockquotes are accounted for correctly\n&gt; Quote content here\n&gt; quote content continued\n&gt; &gt; Nested Blockquote\n&gt; &gt; content continued\n\n**Note that the empty line is either one less blockquote indicator if followed/proceeded by more blockquote content or it is an empty line**\n\n# Doubly nested code block\n\n&gt; &gt; Quote content here\n&gt; &gt; quote content continued\n</code></pre>  After:  <pre><code># Make sure that nested blockquotes are accounted for correctly\n\n&gt; Quote content here\n&gt; quote content continued\n&gt;\n&gt; &gt; Nested Blockquote\n&gt; &gt; content continued\n\n**Note that the empty line is either one less blockquote indicator if followed/proceeded by more blockquote content or it is an empty line**\n\n# Doubly nested code block\n\n&gt; &gt; Quote content here\n&gt; &gt; quote content continued\n</code></pre>"},{"location":"settings/spacing-rules/#empty-line-around-code-fences","title":"Empty Line Around Code Fences","text":"<p>Alias: <code>empty-line-around-code-fences</code></p> <p>Ensures that there is an empty line around code fences unless they start or end a document.</p>"},{"location":"settings/spacing-rules/#examples_4","title":"Examples","text":"Fenced code blocks that start a document do not get an empty line before them.  Before:  <pre><code>``` js\nvar temp = 'text';\n// this is a code block\n```\nText after code block.\n</code></pre>  After:  <pre><code>``` js\nvar temp = 'text';\n// this is a code block\n```\n\nText after code block.\n</code></pre> Fenced code blocks that end a document do not get an empty line after them.  Before:  <pre><code># Heading 1\n```\nHere is a code block\n```\n</code></pre>  After:  <pre><code># Heading 1\n\n```\nHere is a code block\n```\n</code></pre> Fenced code blocks that are in a blockquote have the proper empty line added  Before:  <pre><code># Make sure that code blocks in blockquotes are accounted for correctly\n&gt; ```js\n&gt; var text = 'this is some text';\n&gt; ```\n&gt;\n&gt; ```js\n&gt; var other text = 'this is more text';\n&gt; ```\n\n**Note that the blanks blockquote lines added do not have whitespace after them**\n\n# Doubly nested code block\n\n&gt; &gt; ```js\n&gt; &gt; var other text = 'this is more text';\n&gt; &gt; ```\n</code></pre>  After:  <pre><code># Make sure that code blocks in blockquotes are accounted for correctly\n\n&gt; ```js\n&gt; var text = 'this is some text';\n&gt; ```\n&gt;\n&gt; ```js\n&gt; var other text = 'this is more text';\n&gt; ```\n\n**Note that the blanks blockquote lines added do not have whitespace after them**\n\n# Doubly nested code block\n\n&gt; &gt; ```js\n&gt; &gt; var other text = 'this is more text';\n&gt; &gt; ```\n</code></pre> Nested fenced code blocks get empty lines added around them  Before:  <pre><code>```markdown\n# Header\n\n````JavaScript\nvar text = 'some string';\n````\n```\n</code></pre>  After:  <pre><code>```markdown\n# Header\n\n````JavaScript\nvar text = 'some string';\n````\n\n```\n</code></pre>"},{"location":"settings/spacing-rules/#empty-line-around-horizontal-rules","title":"Empty Line Around Horizontal Rules","text":"<p>Alias: <code>empty-line-around-horizontal-rules</code></p> <p>Ensures that there is an empty line around horizontal rules unless they start or end a document.</p>"},{"location":"settings/spacing-rules/#examples_5","title":"Examples","text":"Horizontal rules that start a document do not get an empty line before them.  Before:  <pre><code>***\n\n\nContent\n</code></pre>  After:  <pre><code>***\n\nContent\n</code></pre> Horizontal rules that end a document do not get an empty line after them.  Before:  <pre><code>***\nContent\n***\n</code></pre>  After:  <pre><code>***\n\nContent\n\n***\n</code></pre> All types of horizontal rules are affected by this rule  Before:  <pre><code>- Content 1\n***\n- Content 2\n---\n- Content 3\n___\n- Content 4\n</code></pre>  After:  <pre><code>- Content 1\n\n***\n\n- Content 2\n\n---\n\n- Content 3\n\n___\n\n- Content 4\n</code></pre> YAML frontmatter is not affected by this rule  Before:  <pre><code>---\nprop: value\n---\n\nContent\n</code></pre>  After:  <pre><code>---\nprop: value\n---\n\nContent\n</code></pre> Paragraphs above `---` are treated as a heading and not spaced apart  Before:  <pre><code>Content\n---\n</code></pre>  After:  <pre><code>Content\n---\n</code></pre>"},{"location":"settings/spacing-rules/#empty-line-around-math-blocks","title":"Empty Line Around Math Blocks","text":"<p>Alias: <code>empty-line-around-math-blocks</code></p> <p>Ensures that there is an empty line around math blocks using <code>Number of Dollar Signs to Indicate a Math Block</code> to determine how many dollar signs indicates a math block for single-line math.</p>"},{"location":"settings/spacing-rules/#examples_6","title":"Examples","text":"Math blocks that start a document do not get an empty line before them.  Before:  <pre><code>$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\nsome more text\n</code></pre>  After:  <pre><code>$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\n\nsome more text\n</code></pre> Math blocks that are singe-line are updated based on the value of `Number of Dollar Signs to Indicate a Math Block` (in this case its value is 2)  Before:  <pre><code>$$\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}$$\nsome more text\n</code></pre>  After:  <pre><code>$$\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}$$\n\nsome more text\n</code></pre> Math blocks that end a document do not get an empty line after them.  Before:  <pre><code>Some text\n$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\n</code></pre>  After:  <pre><code>Some text\n\n$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\n</code></pre> Math blocks that are not at the start or the end of the document will have an empty line added before and after them  Before:  <pre><code>Some text\n$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\nsome more text\n</code></pre>  After:  <pre><code>Some text\n\n$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\n\nsome more text\n</code></pre> Math blocks in callouts or blockquotes have the appropriately formatted blank lines added  Before:  <pre><code>&gt; Math block in blockquote\n&gt; $$\n&gt; \\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n&gt; $$\n\nMore content here\n\n&gt; Math block doubly nested in blockquote\n&gt; &gt; $$\n&gt; &gt; \\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n&gt; &gt; $$\n</code></pre>  After:  <pre><code>&gt; Math block in blockquote\n&gt;\n&gt; $$\n&gt; \\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n&gt; $$\n\nMore content here\n\n&gt; Math block doubly nested in blockquote\n&gt;\n&gt; &gt; $$\n&gt; &gt; \\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n&gt; &gt; $$\n</code></pre>"},{"location":"settings/spacing-rules/#empty-line-around-tables","title":"Empty Line Around Tables","text":"<p>Alias: <code>empty-line-around-tables</code></p> <p>Ensures that there is an empty line around github flavored tables unless they start or end a document.</p>"},{"location":"settings/spacing-rules/#examples_7","title":"Examples","text":"Tables that start a document do not get an empty line before them.  Before:  <pre><code>| Column 1 | Column 2 |\n|----------|----------|\n| foo      | bar      |\n| baz      | qux      |\n| quux     | quuz     |\nMore text.\n# Heading\n\n**Note that text directly following a table is considered part of a table according to github markdown**\n</code></pre>  After:  <pre><code>| Column 1 | Column 2 |\n|----------|----------|\n| foo      | bar      |\n| baz      | qux      |\n| quux     | quuz     |\n\nMore text.\n# Heading\n\n**Note that text directly following a table is considered part of a table according to github markdown**\n</code></pre> Tables that end a document do not get an empty line after them.  Before:  <pre><code># Heading 1\n| Column 1 | Column 2 |\n|----------|----------|\n| foo      | bar      |\n| baz      | qux      |\n| quux     | quuz     |\n</code></pre>  After:  <pre><code># Heading 1\n\n| Column 1 | Column 2 |\n|----------|----------|\n| foo      | bar      |\n| baz      | qux      |\n| quux     | quuz     |\n</code></pre> Tables that are not at the start or the end of the document will have an empty line added before and after them  Before:  <pre><code># Table 1\n| Column 1 | Column 2 | Column 3 |\n|----------|----------|----------|\n| foo      | bar      | blob     |\n| baz      | qux      | trust    |\n| quux     | quuz     | glob     |\n# Table 2 without Pipe at Start and End\n| Column 1 | Column 2 |\n:-: | -----------:\nbar | baz\nfoo | bar\n# Header for more content\nNew paragraph.\n</code></pre>  After:  <pre><code># Table 1\n\n| Column 1 | Column 2 | Column 3 |\n|----------|----------|----------|\n| foo      | bar      | blob     |\n| baz      | qux      | trust    |\n| quux     | quuz     | glob     |\n\n# Table 2 without Pipe at Start and End\n\n| Column 1 | Column 2 |\n:-: | -----------:\nbar | baz\nfoo | bar\n\n# Header for more content\nNew paragraph.\n</code></pre> Tables in callouts or blockquotes have the appropriately formatted blank lines added  Before:  <pre><code>&gt; Table in blockquote\n&gt; | Column 1 | Column 2 | Column 3 |\n&gt; |----------|----------|----------|\n&gt; | foo      | bar      | blob     |\n&gt; | baz      | qux      | trust    |\n&gt; | quux     | quuz     | glob     |\n\nMore content here\n\n&gt; Table doubly nested in blockquote\n&gt; &gt; | Column 1 | Column 2 | Column 3 |\n&gt; &gt; |----------|----------|----------|\n&gt; &gt; | foo      | bar      | blob     |\n&gt; &gt; | baz      | qux      | trust    |\n&gt; &gt; | quux     | quuz     | glob     |\n</code></pre>  After:  <pre><code>&gt; Table in blockquote\n&gt;\n&gt; | Column 1 | Column 2 | Column 3 |\n&gt; |----------|----------|----------|\n&gt; | foo      | bar      | blob     |\n&gt; | baz      | qux      | trust    |\n&gt; | quux     | quuz     | glob     |\n\nMore content here\n\n&gt; Table doubly nested in blockquote\n&gt;\n&gt; &gt; | Column 1 | Column 2 | Column 3 |\n&gt; &gt; |----------|----------|----------|\n&gt; &gt; | foo      | bar      | blob     |\n&gt; &gt; | baz      | qux      | trust    |\n&gt; &gt; | quux     | quuz     | glob     |\n</code></pre>"},{"location":"settings/spacing-rules/#heading-blank-lines","title":"Heading blank lines","text":"<p>Alias: <code>heading-blank-lines</code></p> <p>All headings have one blank line both before and after (except where the heading is at the beginning or end of the document).</p>"},{"location":"settings/spacing-rules/#options_2","title":"Options","text":"Name Description List Items Default Value <code>Bottom</code> Ensures one blank line after headings N/A <code>true</code> <code>Empty Line Between YAML and Header</code> Keep the empty line between the YAML frontmatter and header N/A <code>true</code>"},{"location":"settings/spacing-rules/#additional-info","title":"Additional Info","text":"<p>Warning</p> <p>If paragraph blank lines is on, a newline will still be added between a heading and a paragraph, even if <code>Bottom</code> is <code>false</code>. You can override this by adding a custom regex replacement rule with the following settings:</p> regex to find flags regex to replace <code>(^#+\\s.*)\\n+</code> <code>gm</code> <code>$1\\n</code>"},{"location":"settings/spacing-rules/#examples_8","title":"Examples","text":"Headings should be surrounded by blank lines  Before:  <pre><code># H1\n## H2\n\n\n# H1\nline\n## H2\n</code></pre>  After:  <pre><code># H1\n\n## H2\n\n# H1\n\nline\n\n## H2\n</code></pre> With `Bottom=false`  Before:  <pre><code># H1\nline\n## H2\n# H1\nline\n</code></pre>  After:  <pre><code># H1\nline\n\n## H2\n# H1\nline\n</code></pre> Empty line before header and after YAML is removed with `Empty Line Between YAML and Header=false`  Before:  <pre><code>---\nkey: value\n---\n\n# Header\nParagraph here...\n</code></pre>  After:  <pre><code>---\nkey: value\n---\n# Header\n\nParagraph here...\n</code></pre>"},{"location":"settings/spacing-rules/#line-break-at-document-end","title":"Line Break at Document End","text":"<p>Alias: <code>line-break-at-document-end</code></p> <p>Ensures that there is exactly one line break at the end of a document if the note is not empty.</p>"},{"location":"settings/spacing-rules/#examples_9","title":"Examples","text":"Appending a line break to the end of the document.  Before:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre>  After:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre> Removing trailing line breaks to the end of the document, except one.  Before:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre>  After:  <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre> Empty files will not have a blank line added  Before:  <pre><code>\n</code></pre>  After:  <pre><code>\n</code></pre>"},{"location":"settings/spacing-rules/#move-math-block-indicators-to-their-own-line","title":"Move Math Block Indicators to Their Own Line","text":"<p>Alias: <code>move-math-block-indicators-to-their-own-line</code></p> <p>Move all starting and ending math block indicators to their own lines using <code>Number of Dollar Signs to Indicate a Math Block</code> to determine how many dollar signs indicates a math block for single-line math.</p>"},{"location":"settings/spacing-rules/#examples_10","title":"Examples","text":"Moving math block indicator to its own line when `Number of Dollar Signs to Indicate a Math Block` = 2  Before:  <pre><code>This is left alone:\n$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\nThe following is updated:\n$$L = \\frac{1}{2} \\rho v^2 S C_L$$\n</code></pre>  After:  <pre><code>This is left alone:\n$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\nThe following is updated:\n$$\nL = \\frac{1}{2} \\rho v^2 S C_L\n$$\n</code></pre> Moving math block indicator to its own line when `Number of Dollar Signs to Indicate a Math Block` = 3 and opening indicator is on the same line as the start of the content  Before:  <pre><code>$$$\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$$\n</code></pre>  After:  <pre><code>$$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$$\n</code></pre> Moving math block indicator to its own line when `Number of Dollar Signs to Indicate a Math Block` = 2 and ending indicator is on the same line as the ending line of the content  Before:  <pre><code>$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}$$\n</code></pre>  After:  <pre><code>$$\n\\boldsymbol{a}=\\begin{bmatrix}a_x \\\\ a_y\\end{bmatrix}\n$$\n</code></pre>"},{"location":"settings/spacing-rules/#paragraph-blank-lines","title":"Paragraph blank lines","text":"<p>Alias: <code>paragraph-blank-lines</code></p> <p>All paragraphs should have exactly one blank line both before and after.</p>"},{"location":"settings/spacing-rules/#additional-info_1","title":"Additional Info","text":"<p>Warning</p> <p>Do not use with two spaces between lines with consecutive content. They work differently and will result in unexpected results.</p>"},{"location":"settings/spacing-rules/#when-is-a-blank-line-added","title":"When Is a Blank Line Added?","text":"<p>When a paragraph has another line after the current one and it does not end in 2 or more spaces, <code>&lt;br&gt;</code>, <code>&lt;br/&gt;</code>, or <code>\\</code>.</p>"},{"location":"settings/spacing-rules/#examples_11","title":"Examples","text":"Paragraphs should be surrounded by blank lines  Before:  <pre><code># H1\nNewlines are inserted.\nA paragraph is a line that starts with a letter.\n</code></pre>  After:  <pre><code># H1\n\nNewlines are inserted.\n\nA paragraph is a line that starts with a letter.\n</code></pre> Paragraphs can be extended via the use of 2 or more spaces at the end of a line, a line break html or xml, or a backslash (\\)  Before:  <pre><code># H1\nContent  \nParagraph content continued &lt;br&gt;\nParagraph content continued once more &lt;br/&gt;\nParagraph content yet again\\\nLast line of paragraph\nA new paragraph\n# H2\n</code></pre>  After:  <pre><code># H1\n\nContent  \nParagraph content continued &lt;br&gt;\nParagraph content continued once more &lt;br/&gt;\nParagraph content yet again\\\nLast line of paragraph\n\nA new paragraph\n\n# H2\n</code></pre>"},{"location":"settings/spacing-rules/#remove-empty-lines-between-list-markers-and-checklists","title":"Remove Empty Lines Between List Markers and Checklists","text":"<p>Alias: <code>remove-empty-lines-between-list-markers-and-checklists</code></p> <p>There should not be any empty lines between list markers and checklists.</p>"},{"location":"settings/spacing-rules/#examples_12","title":"Examples","text":"Blank lines are removed between ordered list items  Before:  <pre><code>1. Item 1\n\n2. Item 2\n</code></pre>  After:  <pre><code>1. Item 1\n2. Item 2\n</code></pre> Blank lines are removed between list items when the list indicator is '-'  Before:  <pre><code>- Item 1\n\n    - Subitem 1\n\n- Item 2\n</code></pre>  After:  <pre><code>- Item 1\n    - Subitem 1\n- Item 2\n</code></pre> Blank lines are removed between checklist items  Before:  <pre><code>- [x] Item 1\n\n    - [!] Subitem 1\n\n- [ ] Item 2\n</code></pre>  After:  <pre><code>- [x] Item 1\n    - [!] Subitem 1\n- [ ] Item 2\n</code></pre> Blank lines are removed between list items when the list indicator is '+'  Before:  <pre><code>+ Item 1\n\n    + Subitem 1\n\n+ Item 2\n</code></pre>  After:  <pre><code>+ Item 1\n    + Subitem 1\n+ Item 2\n</code></pre> Blank lines are removed between list items when the list indicator is '*'  Before:  <pre><code>* Item 1\n\n    * Subitem 1\n\n* Item 2\n</code></pre>  After:  <pre><code>* Item 1\n    * Subitem 1\n* Item 2\n</code></pre> Blanks lines are removed between like list types (ordered, specific list item indicators, and checklists) while blanks are left between different kinds of list item indicators  Before:  <pre><code>1. Item 1\n\n2. Item 2\n\n- Item 1\n\n    - Subitem 1\n\n- Item 2\n\n- [x] Item 1\n\n    - [f] Subitem 1\n\n- [ ] Item 2\n\n+ Item 1\n\n    + Subitem 1\n\n+ Item 2\n\n* Item 1\n\n    * Subitem 1\n\n* Item 2\n</code></pre>  After:  <pre><code>1. Item 1\n2. Item 2\n\n- Item 1\n    - Subitem 1\n- Item 2\n\n- [x] Item 1\n    - [f] Subitem 1\n- [ ] Item 2\n\n+ Item 1\n    + Subitem 1\n+ Item 2\n\n* Item 1\n    * Subitem 1\n* Item 2\n</code></pre>"},{"location":"settings/spacing-rules/#remove-link-spacing","title":"Remove link spacing","text":"<p>Alias: <code>remove-link-spacing</code></p> <p>Removes spacing around link text.</p>"},{"location":"settings/spacing-rules/#examples_13","title":"Examples","text":"Space in regular markdown link text  Before:  <pre><code>[ here is link text1 ](link_here)\n[ here is link text2](link_here)\n[here is link text3 ](link_here)\n[here is link text4](link_here)\n[   here is link text5  ](link_here)\n[](link_here)\n**Note that image markdown syntax does not get affected even if it is transclusion:**\n![  here is link text6 ](link_here)\n</code></pre>  After:  <pre><code>[here is link text1](link_here)\n[here is link text2](link_here)\n[here is link text3](link_here)\n[here is link text4](link_here)\n[here is link text5](link_here)\n[](link_here)\n**Note that image markdown syntax does not get affected even if it is transclusion:**\n![  here is link text6 ](link_here)\n</code></pre> Space in wiki link text  Before:  <pre><code>[[link_here| here is link text1 ]]\n[[link_here|here is link text2 ]]\n[[link_here| here is link text3]]\n[[link_here|here is link text4]]\n[[link_here|    here is link text5  ]]\n![[link_here|   here is link text6  ]]\n[[link_here]]\n</code></pre>  After:  <pre><code>[[link_here|here is link text1]]\n[[link_here|here is link text2]]\n[[link_here|here is link text3]]\n[[link_here|here is link text4]]\n[[link_here|here is link text5]]\n![[link_here|here is link text6]]\n[[link_here]]\n</code></pre>"},{"location":"settings/spacing-rules/#remove-space-around-characters","title":"Remove Space around Characters","text":"<p>Alias: <code>remove-space-around-characters</code></p> <p>Ensures that certain characters are not surrounded by whitespace (either single spaces or a tab). Note: this may causes issues with markdown format in some cases.</p>"},{"location":"settings/spacing-rules/#options_3","title":"Options","text":"Name Description List Items Default Value <code>Include Fullwidth Forms</code> Include Fullwidth Forms Unicode block N/A <code>true</code> <code>Include CJK Symbols and Punctuation</code> Include CJK Symbols and Punctuation Unicode block N/A <code>true</code> <code>Include Dashes</code> Include en dash (\u2013) and em dash (\u2014) N/A <code>true</code> <code>Other symbols</code> Other symbols to include N/A"},{"location":"settings/spacing-rules/#examples_14","title":"Examples","text":"Remove Spaces and Tabs around Fullwidth Characters  Before:  <pre><code>Full list of affected characters: \uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19\uff21\uff22\uff23\uff24\uff25\uff26\uff27\uff28\uff29\uff2a\uff2b\uff2c\uff2d\uff2e\uff2f\uff30\uff31\uff32\uff33\uff34\uff35\uff36\uff37\uff38\uff39\uff3a\uff41\uff42\uff43\uff44\uff45\uff46\uff47\uff48\uff49\uff4a\uff4b\uff4c\uff4d\uff4e\uff4f\uff50\uff51\uff52\uff53\uff54\uff55\uff56\uff57\uff58\uff59\uff5a\uff0c\uff0e\uff1a\uff1b\uff01\uff1f\uff02\uff07\uff40\uff3e\uff5e\uffe3\uff3f\uff06\uff20\uff03\uff05\uff0b\uff0d\uff0a\uff1d\uff1c\uff1e\uff08\uff09\uff3b\uff3d\uff5b\uff5d\uff5f\uff60\uff5c\uffe4\uff0f\uff3c\uffe2\uff04\uffe1\uffe0\uffe6\uffe5\u3002\u3001\u300c\u300d\u300e\u300f\u3014\u3015\u3010\u3011\u2014\u2026\u2013\u300a\u300b\u3008\u3009\nThis is a fullwidth period   \u3002 with text after it.\nThis is a fullwidth comma   \uff0c  with text after it.\nThis is a fullwidth left parenthesis \uff08  with text after it.\nThis is a fullwidth right parenthesis \uff09  with text after it.\nThis is a fullwidth colon \uff1a  with text after it.\nThis is a fullwidth semicolon \uff1b  with text after it.\n  \uff32emoves space at start of line\n</code></pre>  After:  <pre><code>Full list of affected characters:\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19\uff21\uff22\uff23\uff24\uff25\uff26\uff27\uff28\uff29\uff2a\uff2b\uff2c\uff2d\uff2e\uff2f\uff30\uff31\uff32\uff33\uff34\uff35\uff36\uff37\uff38\uff39\uff3a\uff41\uff42\uff43\uff44\uff45\uff46\uff47\uff48\uff49\uff4a\uff4b\uff4c\uff4d\uff4e\uff4f\uff50\uff51\uff52\uff53\uff54\uff55\uff56\uff57\uff58\uff59\uff5a\uff0c\uff0e\uff1a\uff1b\uff01\uff1f\uff02\uff07\uff40\uff3e\uff5e\uffe3\uff3f\uff06\uff20\uff03\uff05\uff0b\uff0d\uff0a\uff1d\uff1c\uff1e\uff08\uff09\uff3b\uff3d\uff5b\uff5d\uff5f\uff60\uff5c\uffe4\uff0f\uff3c\uffe2\uff04\uffe1\uffe0\uffe6\uffe5\u3002\u3001\u300c\u300d\u300e\u300f\u3014\u3015\u3010\u3011\u2014\u2026\u2013\u300a\u300b\u3008\u3009\nThis is a fullwidth period\u3002with text after it.\nThis is a fullwidth comma\uff0cwith text after it.\nThis is a fullwidth left parenthesis\uff08with text after it.\nThis is a fullwidth right parenthesis\uff09with text after it.\nThis is a fullwidth colon\uff1awith text after it.\nThis is a fullwidth semicolon\uff1bwith text after it.\n\uff32emoves space at start of line\n</code></pre> Fullwidth Characters in List Do not Affect List Markdown Syntax  Before:  <pre><code># List indicators should not have the space after them removed if they are followed by a fullwidth character\n\n- \uff3b contents here\uff3d\n  -  \uff3b more contents here\uff3d more text here\n+   \uff3b another item here\uff3d\n* \uff3b one last item here\uff3d\n\n# Nested in a blockquote\n\n&gt; - \uff3b contents here\uff3d\n&gt;   -  \uff3b more contents here\uff3d more text here\n&gt; +  \uff3b another item here\uff3d\n&gt; * \uff3b one last item here\uff3d\n\n# Doubly nested in a blockquote\n\n&gt; The following is doubly nested\n&gt; &gt; - \uff3b contents here\uff3d\n&gt; &gt;   -   \uff3b more contents here\uff3d more text here\n&gt; &gt; +  \uff3b another item here\uff3d\n&gt; &gt; * \uff3b one last item here\uff3d\n</code></pre>  After:  <pre><code># List indicators should not have the space after them removed if they are followed by a fullwidth character\n\n- \uff3bcontents here\uff3d\n  - \uff3bmore contents here\uff3dmore text here\n+ \uff3banother item here\uff3d\n* \uff3bone last item here\uff3d\n\n# Nested in a blockquote\n\n&gt; - \uff3bcontents here\uff3d\n&gt;   - \uff3bmore contents here\uff3dmore text here\n&gt; + \uff3banother item here\uff3d\n&gt; * \uff3bone last item here\uff3d\n\n# Doubly nested in a blockquote\n\n&gt; The following is doubly nested\n&gt; &gt; - \uff3bcontents here\uff3d\n&gt; &gt;   - \uff3bmore contents here\uff3dmore text here\n&gt; &gt; + \uff3banother item here\uff3d\n&gt; &gt; * \uff3bone last item here\uff3d\n</code></pre>"},{"location":"settings/spacing-rules/#remove-space-before-or-after-characters","title":"Remove Space Before or After Characters","text":"<p>Alias: <code>remove-space-before-or-after-characters</code></p> <p>Removes space before the specified characters and after the specified characters. Note: this may causes issues with markdown format in some cases.</p>"},{"location":"settings/spacing-rules/#options_4","title":"Options","text":"Name Description List Items Default Value <code>Remove Space Before Characters</code> Removes space before the specified characters. Note: using <code>{</code> or <code>}</code> in the list of characters will unexpectedly affect files as it is used in the ignore syntax behind the scenes. N/A <code>,!?;:).\u2019\u201d]</code> <code>Remove Space After Characters</code> Removes space after the specified characters. &gt;Note: using <code>{</code> or <code>}</code> in the list of characters will unexpectedly affect files as it is used in the ignore syntax behind the scenes. N/A <code>\u00bf\u00a1\u2018\u201c([</code>"},{"location":"settings/spacing-rules/#examples_15","title":"Examples","text":"Remove Spaces and Tabs Before and After Default Symbol Set  Before:  <pre><code>In the end , the space gets removed  .\nThe space before the question mark was removed right ?\nThe space before the exclamation point gets removed !\nA semicolon ; and colon : have spaces removed before them\n\u2018 Text in single quotes \u2019\n\u201c Text in double quotes \u201d\n[ Text in square braces ]\n( Text in parenthesis )\n</code></pre>  After:  <pre><code>In the end, the space gets removed.\nThe space before the question mark was removed right?\nThe space before the exclamation point gets removed!\nA semicolon; and colon: have spaces removed before them\n\u2018Text in single quotes\u2019\n\u201cText in double quotes\u201d\n[Text in square braces]\n(Text in parenthesis)\n</code></pre>"},{"location":"settings/spacing-rules/#space-after-list-markers","title":"Space after list markers","text":"<p>Alias: <code>space-after-list-markers</code></p> <p>There should be a single space after list markers and checkboxes.</p>"},{"location":"settings/spacing-rules/#examples_16","title":"Examples","text":"A single space is left between the list marker and the text of the list item  Before:  <pre><code>1.   Item 1\n2.  Item 2\n\n-   [ ] Item 1\n- [x]    Item 2\n    -  [ ] Item 3\n</code></pre>  After:  <pre><code>1. Item 1\n2. Item 2\n\n- [ ] Item 1\n- [x] Item 2\n    - [ ] Item 3\n</code></pre>"},{"location":"settings/spacing-rules/#space-between-chinese-japanese-or-korean-and-english-or-numbers","title":"Space between Chinese Japanese or Korean and English or numbers","text":"<p>Alias: <code>space-between-chinese-japanese-or-korean-and-english-or-numbers</code></p> <p>Ensures that Chinese, Japanese, or Korean and English or numbers are separated by a single space. Follows these guidelines</p>"},{"location":"settings/spacing-rules/#options_5","title":"Options","text":"Name Description List Items Default Value <code>English Punctuations and Symbols Before CJK</code> The list of non-letter punctuation and symbols to consider to be from English when found before Chinese, Japanese, or Korean characters. Note: \"*\" is always considered to be English and is necessary for handling some markdown syntaxes properly. N/A <code>-+;:'\"\u00b0%$)]</code> <code>English Punctuations and Symbols After CJK</code> The list of non-letter punctuation and symbols to consider to be from English when found after Chinese, Japanese, or Korean characters. Note: \"*\" is always considered to be English and is necessary for handling some markdown syntaxes properly. N/A <code>-+'\"([\u00a5$</code>"},{"location":"settings/spacing-rules/#examples_17","title":"Examples","text":"Space between Chinese and English  Before:  <pre><code>\u4e2d\u6587\u5b57\u7b26\u4e32english\u4e2d\u6587\u5b57\u7b26\u4e32\u3002\n</code></pre>  After:  <pre><code>\u4e2d\u6587\u5b57\u7b26\u4e32 english \u4e2d\u6587\u5b57\u7b26\u4e32\u3002\n</code></pre> Space between Chinese and link  Before:  <pre><code>\u4e2d\u6587\u5b57\u7b26\u4e32[english](http://example.com)\u4e2d\u6587\u5b57\u7b26\u4e32\u3002\n</code></pre>  After:  <pre><code>\u4e2d\u6587\u5b57\u7b26\u4e32 [english](http://example.com) \u4e2d\u6587\u5b57\u7b26\u4e32\u3002\n</code></pre> Space between Chinese and inline code block  Before:  <pre><code>\u4e2d\u6587\u5b57\u7b26\u4e32`code`\u4e2d\u6587\u5b57\u7b26\u4e32\u3002\n</code></pre>  After:  <pre><code>\u4e2d\u6587\u5b57\u7b26\u4e32 `code` \u4e2d\u6587\u5b57\u7b26\u4e32\u3002\n</code></pre> No space between Chinese and English in tag  Before:  <pre><code>#\u6807\u7b7eA #\u6807\u7b7e2\u6807\u7b7e\n</code></pre>  After:  <pre><code>#\u6807\u7b7eA #\u6807\u7b7e2\u6807\u7b7e\n</code></pre> Make sure that spaces are not added between italics and chinese characters to preserve markdown syntax  Before:  <pre><code>_\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f_\n*\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish*\n\n# Handling bold and italics nested in each other is not supported at this time\n\n**_\u8fd9\u662f\u4e00_\u4e2a\u6570\u5b66\u516c\u5f0f**\n*\u8fd9\u662f\u4e00hello__\u4e2a\u6570\u5b66world\u516c\u5f0f__*\n</code></pre>  After:  <pre><code>_\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f_\n*\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f english*\n\n# Handling bold and italics nested in each other is not supported at this time\n\n**_ \u8fd9\u662f\u4e00 _ \u4e2a\u6570\u5b66\u516c\u5f0f**\n*\u8fd9\u662f\u4e00 hello__ \u4e2a\u6570\u5b66 world \u516c\u5f0f __*\n</code></pre> Images and links are ignored  Before:  <pre><code>[[\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish]]\n![[\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish.jpg]]\n[\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish](\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish.md)\n![\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish](\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish.jpg)\n</code></pre>  After:  <pre><code>[[\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish]]\n![[\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish.jpg]]\n[\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish](\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish.md)\n![\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish](\u8fd9\u662f\u4e00\u4e2a\u6570\u5b66\u516c\u5f0fenglish.jpg)\n</code></pre> Space between CJK and English  Before:  <pre><code>\u65e5\u672c\u8a9eenglish\u3072\u3089\u304c\u306a\n\u30ab\u30bf\u30ab\u30caenglish\u30ab\u30bf\u30ab\u30ca\n\uff8a\uff9d\uff76\uff78\uff76\uff80\uff76\uff85english\uff11\uff12\uff13\u5168\u89d2\u6570\u5b57\n\ud55c\uae00english\ud55c\uae00\n</code></pre>  After:  <pre><code>\u65e5\u672c\u8a9e english \u3072\u3089\u304c\u306a\n\u30ab\u30bf\u30ab\u30ca english \u30ab\u30bf\u30ab\u30ca\n\uff8a\uff9d\uff76\uff78\uff76\uff80\uff76\uff85 english\uff11\uff12\uff13\u5168\u89d2\u6570\u5b57\n\ud55c\uae00 english \ud55c\uae00\n</code></pre>"},{"location":"settings/spacing-rules/#trailing-spaces","title":"Trailing spaces","text":"<p>Alias: <code>trailing-spaces</code></p> <p>Removes extra spaces after every line.</p>"},{"location":"settings/spacing-rules/#options_6","title":"Options","text":"Name Description List Items Default Value <code>Two Space Linebreak</code> Ignore two spaces followed by a line break (\"Two Space Rule\"). N/A false"},{"location":"settings/spacing-rules/#examples_18","title":"Examples","text":"Removes trailing spaces and tabs.  Before:  <pre><code># H1\nLine with trailing spaces and tabs.         \n</code></pre>  After:  <pre><code># H1\nLine with trailing spaces and tabs.\n</code></pre> With `Two Space Linebreak = true`  Before:  <pre><code># H1\nLine with trailing spaces and tabs.  \n</code></pre>  After:  <pre><code># H1\nLine with trailing spaces and tabs.  \n</code></pre>"},{"location":"settings/yaml-rules/","title":"YAML Rules","text":""},{"location":"settings/yaml-rules/#yaml-rules","title":"YAML Rules","text":"<p>These rules try their best to work with YAML values in Obsidian.md. There are a couple of things to keep in mind about these rules:</p> <ul> <li>The rules work on most YAML use cases, but it is not perfect</li> <li>There are certain formats of YAML that may have problems being parsed since the YAML keys have their values parsed via regex instead of a library at this time</li> <li>Comments in the value of a key may cause problems with things like sorting or properly grabbing a key's value</li> <li>Blank lines may be removed if you try sorting or making modifications to the order of keys in the YAML via the Linter</li> </ul>"},{"location":"settings/yaml-rules/#add-blank-line-after-yaml","title":"Add Blank Line After YAML","text":"<p>Alias: <code>add-blank-line-after-yaml</code></p> <p>Adds a blank line after the YAML block if it does not end the current file or it is not already followed by at least 1 blank line</p>"},{"location":"settings/yaml-rules/#examples","title":"Examples","text":"A file with just YAML in it does not get a blank line after the YAML  Before:  <pre><code>---\nkey: value\n---\n</code></pre>  After:  <pre><code>---\nkey: value\n---\n</code></pre> A file with YAML followed directly by content has an empty line added  Before:  <pre><code>---\nkey: value\n---\nHere is some text\n</code></pre>  After:  <pre><code>---\nkey: value\n---\n\nHere is some text\n</code></pre> A file with YAML that already has a blank line after it and before content has no empty line added  Before:  <pre><code>---\nkey: value\n---\n\nHere is some text\n</code></pre>  After:  <pre><code>---\nkey: value\n---\n\nHere is some text\n</code></pre>"},{"location":"settings/yaml-rules/#dedupe-yaml-array-values","title":"Dedupe YAML Array Values","text":"<p>Alias: <code>dedupe-yaml-array-values</code></p> <p>Removes duplicate array values in a case sensitive manner.</p>"},{"location":"settings/yaml-rules/#options","title":"Options","text":"Name Description List Items Default Value <code>Dedupe YAML aliases section</code> Turns on removing duplicate aliases. N/A <code>true</code> <code>Dedupe YAML tags section</code> Turns on removing duplicate tags. N/A <code>true</code> <code>Dedupe YAML array sections</code> Turns on removing duplicate values for regular YAML arrays N/A <code>true</code> <code>YAML Keys to Ignore</code> A list of YAML keys without the ending colon on their own lines that are not meant to have duplicate values removed from them. N/A"},{"location":"settings/yaml-rules/#examples_1","title":"Examples","text":"Dedupe YAML tags is case sensitive and will use your default format for tags.  Before:  <pre><code>---\ntags: [computer, research, computer, Computer]\naliases:\n  - Title 1\n  - Title2\n---\n</code></pre>  After:  <pre><code>---\ntags: [computer, research, Computer]\naliases:\n  - Title 1\n  - Title2\n---\n</code></pre> Dedupe YAML aliases is case sensitive and will use your default format for aliases.  Before:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title2\n  - Title 1\n  - Title2\n  - Title 3\n---\n</code></pre>  After:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title2\n  - Title 3\n---\n</code></pre> Dedupe YAML array keys is case sensitive and will try to preserve the original array format.  Before:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title2\narr1: [val, val1, val, val2, Val]\narr2:\n  - Val\n  - Val\n  - val\n  - val2\n  - Val2\n---\n</code></pre>  After:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title2\narr1: [val, val1, val2, Val]\narr2:\n  - Val\n  - val\n  - val2\n  - Val2\n---\n</code></pre> Dedupe YAML respects list of keys to not remove duplicates of for normal arrays (keys to ignore is just `arr2` for this example)  Before:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title2\narr1: [val, val1, val, val2, Val]\narr2:\n  - Val\n  - Val\n  - val\n  - val2\n  - Val2\n---\n</code></pre>  After:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title2\narr1: [val, val1, val2, Val]\narr2:\n  - Val\n  - Val\n  - val\n  - val2\n  - Val2\n---\n</code></pre>"},{"location":"settings/yaml-rules/#escape-yaml-special-characters","title":"Escape YAML Special Characters","text":"<p>Alias: <code>escape-yaml-special-characters</code></p> <p>Escapes colons with a space after them (: ), single quotes ('), and double quotes (\") in YAML.</p>"},{"location":"settings/yaml-rules/#options_1","title":"Options","text":"Name Description List Items Default Value <code>Try to Escape Single Line Arrays</code> Tries to escape array values assuming that an array starts with \"[\", ends with \"]\", and has items that are delimited by \",\". N/A false"},{"location":"settings/yaml-rules/#examples_2","title":"Examples","text":"YAML without anything to escape  Before:  <pre><code>---\nkey: value\notherKey: []\n---\n</code></pre>  After:  <pre><code>---\nkey: value\notherKey: []\n---\n</code></pre> YAML with unescaped values  Before:  <pre><code>---\nkey: value: with colon in the middle\nsecondKey: value with ' a single quote present\nthirdKey: \"already escaped: value\"\nfourthKey: value with \" a double quote present\nfifthKey: value with both ' \" a double and single quote present is not escaped, but is invalid YAML\nsixthKey: colon:between characters is fine\notherKey: []\n---\n</code></pre>  After:  <pre><code>---\nkey: \"value: with colon in the middle\"\nsecondKey: \"value with ' a single quote present\"\nthirdKey: \"already escaped: value\"\nfourthKey: 'value with \" a double quote present'\nfifthKey: value with both ' \" a double and single quote present is not escaped, but is invalid YAML\nsixthKey: colon:between characters is fine\notherKey: []\n---\n</code></pre> YAML with unescaped values in an expanded list with `Default Escape Character = '`  Before:  <pre><code>---\nkey:\n  - value: with colon in the middle\n  - value with ' a single quote present\n  - 'already escaped: value'\n  - value with \" a double quote present\n  - value with both ' \" a double and single quote present is not escaped, but is invalid YAML\n  - colon:between characters is fine\n---\n</code></pre>  After:  <pre><code>---\nkey:\n  - 'value: with colon in the middle'\n  - \"value with ' a single quote present\"\n  - 'already escaped: value'\n  - 'value with \" a double quote present'\n  - value with both ' \" a double and single quote present is not escaped, but is invalid YAML\n  - colon:between characters is fine\n---\n</code></pre> YAML with unescaped values with arrays  Before:  <pre><code>---\narray: [value: with colon in the middle, value with ' a single quote present, \"already escaped: value\", value with \" a double quote present, value with both ' \" a double and single quote present is not escaped but is invalid YAML, colon:between characters is fine]\nnestedArray: [[value: with colon in the middle, value with ' a single quote present], [\"already escaped: value\", value with \" a double quote present], value with both ' \" a double and single quote present is not escaped but is invalid YAML, colon:between characters is fine]\nnestedArray2: [[value: with colon in the middle], value with ' a single quote present]\n---\n\n_Note that escaped commas in a YAML array will be treated as a separator._\n</code></pre>  After:  <pre><code>---\narray: [\"value: with colon in the middle\", \"value with ' a single quote present\", \"already escaped: value\", 'value with \" a double quote present', value with both ' \" a double and single quote present is not escaped but is invalid YAML, colon:between characters is fine]\nnestedArray: [[\"value: with colon in the middle\", \"value with ' a single quote present\"], [\"already escaped: value\", 'value with \" a double quote present'], value with both ' \" a double and single quote present is not escaped but is invalid YAML, colon:between characters is fine]\nnestedArray2: [[\"value: with colon in the middle\"], \"value with ' a single quote present\"]\n---\n\n_Note that escaped commas in a YAML array will be treated as a separator._\n</code></pre>"},{"location":"settings/yaml-rules/#force-yaml-escape","title":"Force YAML Escape","text":"<p>Alias: <code>force-yaml-escape</code></p> <p>Escapes the values for the specified YAML keys.</p>"},{"location":"settings/yaml-rules/#options_2","title":"Options","text":"Name Description List Items Default Value <code>Force YAML Escape on Keys</code> Uses the YAML escape character on the specified YAML keys separated by a new line character if it is not already escaped. Do not use on YAML arrays. N/A"},{"location":"settings/yaml-rules/#examples_3","title":"Examples","text":"YAML without anything to escape  Before:  <pre><code>---\nkey: value\notherKey: []\n---\n</code></pre>  After:  <pre><code>---\nkey: value\notherKey: []\n---\n</code></pre> Force YAML keys to be escaped with double quotes where not already escaped with `Force YAML Escape on Keys = 'key'\\n'title'\\n'bool'`  Before:  <pre><code>---\nkey: 'Already escaped value'\ntitle: This is a title\nbool: false\nunaffected: value\n---\n\n_Note that the force YAML key option should not be used with arrays._\n</code></pre>  After:  <pre><code>---\nkey: 'Already escaped value'\ntitle: \"This is a title\"\nbool: \"false\"\nunaffected: value\n---\n\n_Note that the force YAML key option should not be used with arrays._\n</code></pre>"},{"location":"settings/yaml-rules/#format-tags-in-yaml","title":"Format Tags in YAML","text":"<p>Alias: <code>format-tags-in-yaml</code></p> <p>Remove Hashtags from tags in the YAML frontmatter, as they make the tags there invalid.</p>"},{"location":"settings/yaml-rules/#examples_4","title":"Examples","text":"Format Tags in YAML frontmatter  Before:  <pre><code>---\ntags: #one #two #three #nested/four/five\n---\n</code></pre>  After:  <pre><code>---\ntags: one two three nested/four/five\n---\n</code></pre> Format tags in array  Before:  <pre><code>---\ntags: [#one #two #three]\n---\n</code></pre>  After:  <pre><code>---\ntags: [one two three]\n---\n</code></pre> Format tags in array with `tag` as the tags key  Before:  <pre><code>---\ntag: [#one #two #three]\n---\n</code></pre>  After:  <pre><code>---\ntag: [one two three]\n---\n</code></pre> Format tags in list  Before:  <pre><code>---\ntags:\n- #tag1\n- #tag2\n---\n</code></pre>  After:  <pre><code>---\ntags:\n- tag1\n- tag2\n---\n</code></pre>"},{"location":"settings/yaml-rules/#format-yaml-array","title":"Format YAML Array","text":"<p>Alias: <code>format-yaml-array</code></p> <p>Allows for the formatting of regular YAML arrays as either multi-line or single-line and <code>tags</code> and <code>aliases</code> are allowed to have some Obsidian specific YAML formats. Note: that single string to single-line goes from a single string entry to a single-line array if more than 1 entry is present. The same is true for single string to multi-line except it becomes a multi-line array.</p>"},{"location":"settings/yaml-rules/#options_3","title":"Options","text":"Name Description List Items Default Value <code>Format YAML aliases section</code> Turns on formatting for the YAML aliases section. You should not enable this option alongside the rule <code>YAML Title Alias</code> as they may not work well together or they may have different format styles selected causing unexpected results. N/A <code>true</code> <code>Format YAML tags section</code> Turns on formatting for the YAML tags section. N/A <code>true</code> <code>Default YAML array section style</code> The style of other YAML arrays that are not <code>tags</code>, <code>aliases</code> or  in <code>Force key values to be single-line arrays</code> and <code>Force key values to be multi-line arrays</code> <code>multi-line</code>: <code>key:\\n  - value</code><code>single-line</code>: <code>key: [value]</code> <code>single-line</code> <code>Format YAML array sections</code> Turns on formatting for regular YAML arrays N/A <code>true</code> <code>Force key values to be single-line arrays</code> Forces the YAML array for the new line separated keys to be in single-line format (leave empty to disable this option) N/A <code>Force key values to be multi-line arrays</code> Forces the YAML array for the new line separated keys to be in multi-line format (leave empty to disable this option) N/A"},{"location":"settings/yaml-rules/#examples_5","title":"Examples","text":"Format tags as a single-line array delimited by spaces and aliases as a multi-line array and format the key `test` to be a single-line array  Before:  <pre><code>---\ntags:\n  - computer\n  - research\naliases: Title 1, Title2\ntest: this is a value\n---\n\n# Notes:\n\nNesting YAML arrays may result in unexpected results.\n\nMulti-line arrays will have empty values removed only leaving one if it is completely empty. The same is not true for single-line arrays as that is invalid YAML unless it comes as the last entry in the array.\n</code></pre>  After:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title2\ntest: [this is a value]\n---\n\n# Notes:\n\nNesting YAML arrays may result in unexpected results.\n\nMulti-line arrays will have empty values removed only leaving one if it is completely empty. The same is not true for single-line arrays as that is invalid YAML unless it comes as the last entry in the array.\n</code></pre> Format tags as a single string with space delimiters, ignore aliases, and format regular YAML arrays as single-line arrays  Before:  <pre><code>---\naliases: Typescript\ntypes:\n  - thought provoking\n  - peer reviewed\ntags: [computer, science, trajectory]\n---\n</code></pre>  After:  <pre><code>---\naliases: Typescript\ntypes: [thought provoking, peer reviewed]\ntags: computer science trajectory\n---\n</code></pre> Arrays with dictionaries in them are ignored  Before:  <pre><code>---\ngists:\n  - id: test123\n    url: 'some_url'\n    filename: file.md\n    isPublic: true\n---\n</code></pre>  After:  <pre><code>---\ngists:\n  - id: test123\n    url: 'some_url'\n    filename: file.md\n    isPublic: true\n---\n</code></pre>"},{"location":"settings/yaml-rules/#insert-yaml-attributes","title":"Insert YAML attributes","text":"<p>Alias: <code>insert-yaml-attributes</code></p> <p>Inserts the given YAML attributes into the YAML frontmatter. Put each attribute on a single line.</p>"},{"location":"settings/yaml-rules/#options_4","title":"Options","text":"Name Description List Items Default Value <code>Text to insert</code> Text to insert into the YAML frontmatter N/A `aliases: tags: `"},{"location":"settings/yaml-rules/#examples_6","title":"Examples","text":"Insert static lines into YAML frontmatter. Text to insert: `aliases: tags: doc animal: dog`  Before:  <pre><code>---\nanimal: cat\n---\n</code></pre>  After:  <pre><code>---\naliases:\ntags: doc\nanimal: cat\n---\n</code></pre>"},{"location":"settings/yaml-rules/#move-tags-to-yaml","title":"Move Tags to YAML","text":"<p>Alias: <code>move-tags-to-yaml</code></p> <p>Move all tags to YAML frontmatter of the document.</p>"},{"location":"settings/yaml-rules/#options_5","title":"Options","text":"Name Description List Items Default Value <code>Body tag operation</code> What to do with non-ignored tags in the body of the file once they have been moved to the frontmatter <code>Nothing</code>: Leaves tags in the body of the file alone<code>Remove hashtag</code>: Removes <code>#</code> from tags in content body after moving them to the YAML frontmatter<code>Remove whole tag</code>: Removes the whole tag in content body after moving them to the YAML frontmatter. Note that this removes the first space prior to the tag as well <code>Nothing</code> <code>Tags to ignore</code> The tags that will not be moved to the tags array or removed from the body content if <code>Remove the hashtag from tags in content body</code> is enabled. Each tag should be on a new line and without the <code>#</code>. Make sure not to include the hashtag in the tag name. N/A"},{"location":"settings/yaml-rules/#examples_7","title":"Examples","text":"Move tags from body to YAML with `Tags to ignore = 'ignored-tag'`  Before:  <pre><code>Text has to do with #test and #markdown\n\n#test content here\n```\n#ignored\nCode block content is ignored\n```\n\nThis inline code `#ignored content`\n\n#ignored-tag is ignored since it is in the ignored list\n</code></pre>  After:  <pre><code>---\ntags: [test, markdown]\n---\nText has to do with #test and #markdown\n\n#test content here\n```\n#ignored\nCode block content is ignored\n```\n\nThis inline code `#ignored content`\n\n#ignored-tag is ignored since it is in the ignored list\n</code></pre> Move tags from body to YAML with existing tags retains the already existing ones and only adds new ones  Before:  <pre><code>---\ntags: [test, tag2]\n---\nText has to do with #test and #markdown\n</code></pre>  After:  <pre><code>---\ntags: [test, tag2, markdown]\n---\nText has to do with #test and #markdown\n</code></pre> Move tags to YAML frontmatter and then remove hashtags in body content tags when `Body tag operation = 'Remove hashtag'` and `Tags to ignore = 'yet-another-ignored-tag'`.  Before:  <pre><code>---\ntags: [test, tag2]\n---\nText has to do with #test and #markdown\n\nThe tag at the end of this line stays as a tag since it is ignored #yet-another-ignored-tag\n</code></pre>  After:  <pre><code>---\ntags: [test, tag2, markdown]\n---\nText has to do with test and markdown\n\nThe tag at the end of this line stays as a tag since it is ignored #yet-another-ignored-tag\n</code></pre> Move tags to YAML frontmatter and then remove body content tags when `Body tag operation = 'Remove whole tag'`.  Before:  <pre><code>---\ntags: [test, tag2]\n---\nThis document will have #tags removed and spacing around tags is left alone except for the space prior to the hashtag #warning\n</code></pre>  After:  <pre><code>---\ntags: [test, tag2, tags, warning]\n---\nThis document will have removed and spacing around tags is left alone except for the space prior to the hashtag\n</code></pre>"},{"location":"settings/yaml-rules/#remove-yaml-keys","title":"Remove YAML Keys","text":"<p>Alias: <code>remove-yaml-keys</code></p> <p>Removes the YAML keys specified</p>"},{"location":"settings/yaml-rules/#options_6","title":"Options","text":"Name Description List Items Default Value <code>YAML Keys to Remove</code> The YAML keys to remove from the YAML frontmatter with or without colons N/A"},{"location":"settings/yaml-rules/#examples_8","title":"Examples","text":"Removes the values specified in `YAML Keys to Remove` = \"status: keywords date\"  Before:  <pre><code>---\nlanguage: Typescript\ntype: programming\ntags: computer\nkeywords:\n  - keyword1\n  - keyword2\nstatus: WIP\ndate: 02/15/2022\n---\n\n# Header Context\n\nText\n</code></pre>  After:  <pre><code>---\nlanguage: Typescript\ntype: programming\ntags: computer\n---\n\n# Header Context\n\nText\n</code></pre>"},{"location":"settings/yaml-rules/#sort-yaml-array-values","title":"Sort YAML Array Values","text":"<p>Alias: <code>sort-yaml-array-values</code></p> <p>Sorts YAML array values based on the specified sort order.</p>"},{"location":"settings/yaml-rules/#options_7","title":"Options","text":"Name Description List Items Default Value <code>Sort YAML aliases section</code> Turns on sorting aliases. N/A <code>true</code> <code>Sort YAML tags section</code> Turns on sorting tags. N/A <code>true</code> <code>Sort YAML array sections</code> Turns on sorting values for regular YAML arrays N/A <code>true</code> <code>YAML Keys to Ignore</code> A list of YAML keys without the ending colon on their own lines that are not meant to have their values sorted. N/A <code>Sort Order</code> The way to sort the YAML array values. <code>Ascending Alphabetical</code>: Sorts the array values from a to z<code>Descending Alphabetical</code>: Sorts the array values from z to a <code>Ascending Alphabetical</code>"},{"location":"settings/yaml-rules/#examples_9","title":"Examples","text":"Sorting YAML array values alphabetically  Before:  <pre><code>---\ntags: [computer, research, androids, Computer]\naliases:\n  - Title 1\n  - Title 2\n---\n</code></pre>  After:  <pre><code>---\ntags: [androids, computer, Computer, research]\naliases:\n  - Title 1\n  - Title 2\n---\n</code></pre> Sorting YAML array values to be alphabetically descending  Before:  <pre><code>---\ntags: [computer, research, androids, Computer]\naliases:\n  - Title 1\n  - Title 2\n---\n</code></pre>  After:  <pre><code>---\ntags: [research, Computer, computer, androids]\naliases:\n  - Title 2\n  - Title 1\n---\n</code></pre> Sort YAML Arrays respects list of keys to not sort values of for normal arrays (keys to ignore is just `arr2` for this example)  Before:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title 2\narr1: [val, val2, val1]\narr2:\n  - val\n  - val2\n  - val1\n---\n</code></pre>  After:  <pre><code>---\ntags: [computer, research]\naliases:\n  - Title 1\n  - Title 2\narr1: [val, val1, val2]\narr2:\n  - val\n  - val2\n  - val1\n---\n</code></pre>"},{"location":"settings/yaml-rules/#yaml-key-sort","title":"YAML Key Sort","text":"<p>Alias: <code>yaml-key-sort</code></p> <p>Sorts the YAML keys based on the order and priority specified. Note: may remove blank lines as well. Only works on non-nested keys.</p>"},{"location":"settings/yaml-rules/#options_8","title":"Options","text":"Name Description List Items Default Value <code>YAML Key Priority Sort Order</code> The order in which to sort keys with one on each line where it sorts in the order found in the list N/A <code>Priority Keys at Start of YAML</code> YAML Key Priority Sort Order is placed at the start of the YAML frontmatter N/A <code>true</code> <code>YAML Sort Order for Other Keys</code> The way in which to sort the keys that are not found in the YAML Key Priority Sort Order text area <code>None</code>: No sorting other than what is in the YAML Key Priority Sort Order text area<code>Ascending Alphabetical</code>: Sorts the keys based on key value from a to z<code>Descending Alphabetical</code>: Sorts the keys based on key value from z to a <code>None</code>"},{"location":"settings/yaml-rules/#examples_10","title":"Examples","text":"Sorts YAML keys in order specified by `YAML Key Priority Sort Order` has a sort order of `date type language`  Before:  <pre><code>---\nlanguage: Typescript\ntype: programming\ntags: computer\nkeywords: []\nstatus: WIP\ndate: 02/15/2022\n---\n</code></pre>  After:  <pre><code>---\ndate: 02/15/2022\ntype: programming\nlanguage: Typescript\ntags: computer\nkeywords: []\nstatus: WIP\n---\n</code></pre> Sorts YAML keys in order specified by `YAML Key Priority Sort Order` has a sort order of `date type language` with `'YAML Sort Order for Other Keys' = Ascending Alphabetical`  Before:  <pre><code>---\nlanguage: Typescript\ntype: programming\ntags: computer\nkeywords: []\nstatus: WIP\ndate: 02/15/2022\n---\n</code></pre>  After:  <pre><code>---\ndate: 02/15/2022\ntype: programming\nlanguage: Typescript\nkeywords: []\nstatus: WIP\ntags: computer\n---\n</code></pre> Sorts YAML keys in order specified by `YAML Key Priority Sort Order` has a sort order of `date type language` with `'YAML Sort Order for Other Keys' = Descending Alphabetical`  Before:  <pre><code>---\nlanguage: Typescript\ntype: programming\ntags: computer\nkeywords: []\nstatus: WIP\ndate: 02/15/2022\n---\n</code></pre>  After:  <pre><code>---\ndate: 02/15/2022\ntype: programming\nlanguage: Typescript\ntags: computer\nstatus: WIP\nkeywords: []\n---\n</code></pre> Sorts YAML keys in order specified by `YAML Key Priority Sort Order` has a sort order of `date type language` with `'YAML Sort Order for Other Keys' = Descending Alphabetical` and `'Priority Keys at Start of YAML' = false`  Before:  <pre><code>---\nlanguage: Typescript\ntype: programming\ntags: computer\nkeywords: []\n\nstatus: WIP\ndate: 02/15/2022\n---\nAny blank line is attached to the line that follows it\n</code></pre>  After:  <pre><code>---\ntags: computer\n\nstatus: WIP\nkeywords: []\ndate: 02/15/2022\ntype: programming\nlanguage: Typescript\n---\nAny blank line is attached to the line that follows it\n</code></pre>"},{"location":"settings/yaml-rules/#yaml-timestamp","title":"YAML Timestamp","text":"<p>Alias: <code>yaml-timestamp</code></p> <p>Keep track of the date the file was last edited in the YAML front matter. Gets dates from file metadata.</p>"},{"location":"settings/yaml-rules/#options_9","title":"Options","text":"Name Description List Items Default Value <code>Date Created</code> Insert the file creation date N/A <code>true</code> <code>Date Created Key</code> Which YAML key to use for creation date N/A <code>date created</code> <code>Date Created Source of Truth</code> Specifies where to get the date created value from if it is already present in the frontmatter. <code>file system</code>: The file system date created value is used to set the value of date created in the frontmatter<code>frontmatter</code>: When a value is present in the frontmatter for date created, this value is used as the value for the date created <code>file system</code> <code>Date Modified</code> Insert the date the file was last modified N/A <code>true</code> <code>Date Modified Key</code> Which YAML key to use for modification date N/A <code>date modified</code> <code>Date Modified Source of Truth</code> Specifies what way should be used to determine when the date modified should be updated if it is already present in the frontmatter. <code>file system</code>: The file system date modified value is used to set the value of date modified in the frontmatter<code>user or Linter edits</code>: When a value is present in the frontmatter for date modified, date modified is kept as is unless the Linter makes a change to a note or the user edits a note with the setting <code>Update YAML Timestamp on File Contents Update</code> set to something other than <code>Never</code>. <code>file system</code> <code>Format</code> Moment date format to use (see Moment format options) N/A <code>dddd, MMMM Do YYYY, h:mm:ss a</code> <code>Convert Local Time to UTC</code> Uses UTC equivalent for saved dates instead of local time N/A false <code>Update YAML Timestamp on File Contents Update</code> When the currently active note is modified, <code>YAML Timestamp</code> is run on the note. This should update the modified note timestamp if it is more than 5 seconds off from the current value. <code>never</code>: never<code>after 5 seconds</code>: after 5 seconds<code>after 10 seconds</code>: after 10 seconds<code>after 15 seconds</code>: after 15 seconds<code>after 30 seconds</code>: after 30 seconds<code>after 1 minute</code>: after 1 minute <code>never</code>"},{"location":"settings/yaml-rules/#additional-info","title":"Additional Info","text":""},{"location":"settings/yaml-rules/#date-modified-value-origin","title":"Date Modified Value Origin","text":"<p>The date modified is not based on the file date modified metadata. This is because the Linter only has access to the last date modified when it runs. This is not a problem or too noticeable when you modify a file frequently. However, when a file is rarely updated, the date modified could be very out of date.</p> <p>For example, say the date modified is January 22nd 2020. But you update the file on January 3rd 2021. The date modified in the YAML frontmatter would say January 22nd 2020 despite being updated in 2021. If you did not run the Linter against the file a 2nd time, it could be left with a very misleading value. As such, the date modified is the time when Linter asks to update the file via any rule except Custom Commands. This should be within about 5 seconds of the value in the file metadata.</p>"},{"location":"settings/yaml-rules/#examples_11","title":"Examples","text":"Adds a header with the date.  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\ndate created: Wednesday, January 1st 2020, 12:00:00 am\ndate modified: Thursday, January 2nd 2020, 12:00:05 am\n---\n# H1\n</code></pre> dateCreated option is false  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\ndate modified: Thursday, January 2nd 2020, 12:00:05 am\n---\n# H1\n</code></pre> Date Created Key is set  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\ncreated: Wednesday, January 1st 2020, 12:00:00 am\n---\n# H1\n</code></pre> Date Modified Key is set  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\nmodified: Wednesday, January 1st 2020, 4:00:00 pm\n---\n# H1\n</code></pre> Header is set with convert to UTC option true  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\ndate created: 2020-01-01T14:00:00+00:00\ndate modified: 2020-01-02T02:00:05+00:00\n---\n# H1\n</code></pre> dateCreated option is false with convert to UTC option true  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\ndate modified: 2020-01-02T02:00:05+00:00\n---\n# H1\n</code></pre> Date Created Key is set with convert to UTC option true  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\ncreated: 2020-01-01T14:00:00+00:00\n---\n# H1\n</code></pre> Date Modified Key is set with convert to UTC option true  Before:  <pre><code># H1\n</code></pre>  After:  <pre><code>---\nmodified: 2020-01-02T02:00:05+00:00\n---\n# H1\n</code></pre>"},{"location":"settings/yaml-rules/#yaml-title","title":"YAML Title","text":"<p>Alias: <code>yaml-title</code></p> <p>Inserts the title of the file into the YAML frontmatter. Gets the title based on the selected mode.</p>"},{"location":"settings/yaml-rules/#options_10","title":"Options","text":"Name Description List Items Default Value <code>Title Key</code> Which YAML key to use for title N/A <code>title</code> <code>Mode</code> The method to use to get the title <code>first-h1-or-filename-if-h1-missing</code>: Uses the first H1 in the file or the filename of the file if there is not H1<code>filename</code>: Uses the filename as the title<code>first-h1</code>: Uses the first H1 in the file as the title <code>first-h1-or-filename-if-h1-missing</code>"},{"location":"settings/yaml-rules/#examples_12","title":"Examples","text":"Adds a header with the title from heading when `mode = 'First H1 or Filename if H1 Missing'`.  Before:  <pre><code># Obsidian\n</code></pre>  After:  <pre><code>---\ntitle: Obsidian\n---\n# Obsidian\n</code></pre> Adds a header with the title when `mode = 'First H1 or Filename if H1 Missing'`.  Before:  <pre><code>\n</code></pre>  After:  <pre><code>---\ntitle: Filename\n---\n</code></pre> Make sure that markdown links in headings are properly copied to the YAML as just the text when `mode = 'First H1 or Filename if H1 Missing'`  Before:  <pre><code># This is a [Heading](test heading.md)\n</code></pre>  After:  <pre><code>---\ntitle: This is a Heading\n---\n# This is a [Heading](test heading.md)\n</code></pre> When `mode = 'First H1'`, title does not have a value if no H1 is present  Before:  <pre><code>## This is a Heading\n</code></pre>  After:  <pre><code>---\ntitle: \"\"\n---\n## This is a Heading\n</code></pre> When `mode = 'Filename'`, title uses the filename ignoring all H1s. Note: the filename is \"Filename\" in this example.  Before:  <pre><code># This is a Heading\n</code></pre>  After:  <pre><code>---\ntitle: Filename\n---\n# This is a Heading\n</code></pre>"},{"location":"settings/yaml-rules/#yaml-title-alias","title":"YAML Title Alias","text":"<p>Alias: <code>yaml-title-alias</code></p> <p>Inserts or updates the title of the file into the YAML frontmatter's aliases section. Gets the title from the first H1 or filename.</p>"},{"location":"settings/yaml-rules/#options_11","title":"Options","text":"Name Description List Items Default Value <code>Preserve existing aliases section style</code> If set, the <code>YAML aliases section style</code> setting applies only to the newly created sections N/A <code>true</code> <code>Keep alias that matches the filename</code> Such aliases are usually redundant N/A false <code>Use the YAML key specified by &lt;code&gt;Alias Helper Key&lt;/code&gt; to help with filename and heading changes</code> If set, when the first H1 heading changes or filename if first H1 is not present changes, then the old alias stored in this key will be replaced with the new value instead of just inserting a new entry in the aliases array N/A <code>true</code> <code>Alias Helper Key</code> The key to use to help keep track of what the last file name or heading was that was stored in the frontmatter by this rule. N/A <code>linter-yaml-title-alias</code>"},{"location":"settings/yaml-rules/#additional-info_1","title":"Additional Info","text":"<p>Note</p> <p>An empty <code>Alias Helper Key</code> will be treated as if you are using <code>linter-yaml-title-alias</code> as the value.</p>"},{"location":"settings/yaml-rules/#examples_13","title":"Examples","text":"Adds a header with the title from heading.  Before:  <pre><code># Obsidian\n</code></pre>  After:  <pre><code>---\naliases:\n  - Obsidian\nlinter-yaml-title-alias: Obsidian\n---\n# Obsidian\n</code></pre> Adds a header with the title from heading without YAML key when the use of the YAML key is set to false.  Before:  <pre><code># Obsidian\n</code></pre>  After:  <pre><code>---\naliases:\n  - Obsidian\n---\n# Obsidian\n</code></pre> Adds a header with the title.  Before:  <pre><code>\n</code></pre>  After:  <pre><code>---\naliases:\n  - Filename\nlinter-yaml-title-alias: Filename\n---\n</code></pre> Adds a header with the title without YAML key when the use of the YAML key is set to false.  Before:  <pre><code>\n</code></pre>  After:  <pre><code>---\naliases:\n  - Filename\n---\n</code></pre> Replaces old filename with new filename when no header is present and filename is different than the old one listed in `linter-yaml-title-alias`.  Before:  <pre><code>---\naliases:\n  - Old Filename\n  - Alias 2\nlinter-yaml-title-alias: Old Filename\n---\n</code></pre>  After:  <pre><code>---\naliases:\n  - Filename\n  - Alias 2\nlinter-yaml-title-alias: Filename\n---\n</code></pre> Make sure that markdown and wiki links in first H1 get their values converted to text  Before:  <pre><code># This is a [Heading](markdown.md)\n</code></pre>  After:  <pre><code>---\naliases:\n  - This is a Heading\nlinter-yaml-title-alias: This is a Heading\n---\n# This is a [Heading](markdown.md)\n</code></pre> Using `title` as `Alias Helper Key` sets the value of `title` to the alias.  Before:  <pre><code>\n</code></pre>  After:  <pre><code>---\naliases:\n  - Filename\ntitle: Filename\n---\n</code></pre>"},{"location":"usage/disabling-rules/","title":"Ignoring or Disabling Rules","text":"<p>There are a couple of way to ignore rules in the Linter. These vary from settings in the plugin itself to values in the YAML frontmatter, and a syntax to ignore rules for part or all of a file.</p>"},{"location":"usage/disabling-rules/#ignoring-a-folder","title":"Ignoring a Folder","text":"<p>There is a setting in the plugin for called <code>Folders to Ignore</code>. As the name suggests, this rule is meant to allow users to specify folders that they do not want the linting rules to affect. The values in the text box are expected to be folder paths from the base of the Obsidian vault.</p> <p></p> <p>For example, in the above image, the <code>templates</code> folder will be ignored when the Linter attempts to run its rules. Nested folders are also allowed as well.</p>"},{"location":"usage/disabling-rules/#ignoring-files-via-regex","title":"Ignoring Files via Regex","text":"<p>There is a setting in this plugin which allows you to be able to ignore files by providing a regex to match against. If a file matches the provided regex, it will go ahead and ignore that file before it even lints the file.</p> <p></p> <p>For example, in the above image you can see that Excalidraw files which end in <code>.exclidraw.md</code> are being ignored using the regex <code>.*\\.excalidraw\\.md$</code>.</p>"},{"location":"usage/disabling-rules/#file-specific-rule-disabling","title":"File Specific Rule Disabling","text":"<p>There are times when there may be a need to disable a specific rule or rules for a particular file and there is no desire to ignore all files in the folder where that file resides. In that case, there is the ability to disable a rule or rules via the YAML frontmatter or ranged ignores.</p>"},{"location":"usage/disabling-rules/#yaml-frontmatter","title":"YAML Frontmatter","text":"<p>In the YAML frontmatter of a file, there is the ability to specify a list of rules to disable for the file using the key <code>disabled rules</code>. Valid values for rules to disable are the rule aliases to disable specific rules or <code>all</code> to disable all rules for the file.</p> <p>For example, the following would disable capitalize headings and header increment for the entire file it is found in: <pre><code>---\ndisabled rules: [capitalize-headings, header-increment]\n---\n</code></pre></p> <p>The following disables all Linter rules for a file: <pre><code>---\ndisabled rules: [all]\n---\n</code></pre></p>"},{"location":"usage/disabling-rules/#range-ignore","title":"Range Ignore","text":"<p>When there is a need to disable the Linter for part of a file, ranged ignores can be used. The syntax for a ranged ignore is <code>&lt;!-- linter-disable --&gt;</code> or <code>%%linter-disable%%</code> with an optional <code>&lt;!-- linter-enable --&gt;</code> or <code>%%linter-disable%%</code> where you want the Linter to start back up with its linting. Leaving off the ending of a range ignore will assume you want to ignore the file contents from the start of the range ignore to the end of the file. So be careful when not ending a range ignore.</p> <p>Warning</p> <p>Ranged ignores only prevent the values in the ranged ignore from being linted. It does not prevent whitespace or other additions around the ranged ignore.</p> <p>The following example shows how you would ignore just a part of a file: <pre><code>Here is some text\n&lt;!-- linter-disable --&gt;\n                          This area will not be formatted\n&lt;!-- linter-enable --&gt;\nMore content goes here...\n%%linter-disable %%\n                          This area will not be formatted\n%%linter-enable%%\n</code></pre></p> <p>Here is another example that shows a ranged ignore without an ending indicator: <pre><code>Here is some text\n&lt;!-- linter-disable --&gt;\n                          This area will not be formatted\nThis content is also not formatted either.\n</code></pre></p> <p>Info</p> <p>Paste rules are not affected by ranged ignores as that would require the copied text to have a ranged ignore in it.</p>"},{"location":"usage/running-rules/","title":"Usage","text":"<p>There are several different ways in which you can run the Linter.</p>"},{"location":"usage/running-rules/#on-save","title":"On Save","text":"<p>This plugin has an option where you can lint the current file when you save it using <code>Ctrl+S</code> or <code>:w</code> if you use vim keybindings. You will need to turn on the setting for <code>Lint on save</code> for this to work.</p> <p>Enabling this setting keeps you from having to manually run the Obsidian Command to a lint a file whenever you want to lint the current file.</p>"},{"location":"usage/running-rules/#on-file-close-or-file-change","title":"On File Close or File Change","text":"<p>There is an option to lint a file when a user either closes it or swaps to a different file. In order to activate this rule, you will need to turn on the setting for <code>Lint on File Change</code>.</p> <p>This way of linting a file can help out if you forget to run the Linter on files before changing to a new file or closing it.</p>"},{"location":"usage/running-rules/#obsidian-commands","title":"Obsidian Commands","text":"Obsidian Command Description Default Keybinding <code>Lint the current file</code> Runs the Linter rules against the current file <code>Ctrl+Alt+L</code> <code>Lint all files in the vault</code> Runs the Linter rules against all files in the vault N/A <code>Lint all files in the current folder</code> Runs the Linter against all files in the current folder and its subfolders N/A <p>Here is an example of linting the current file via an Obsidian Command:</p> <p></p>"},{"location":"usage/running-rules/#file-menu-action-items","title":"File Menu Action Items","text":"<p>There is also the option to lint files or folders by right clicking on them from the file menu and then selecting the corresponding dropdown options.</p> <p>Here is what the action item for lint file looks like from the file menu:</p> <p></p> <p>Here is what the action item for lint folder looks like from the file menu:</p> <p></p>"}]}